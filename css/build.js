#!/usr/bin/env node

/**
 * CSS Builder –¥–ª—è Stay on the Board
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±'—î–¥–Ω—É—î –≤—Å—ñ CSS –º–æ–¥—É–ª—ñ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const CONFIG = {
    inputDir: __dirname,
    outputFile: path.join(__dirname, 'bundle.css'),
    mainFile: 'main.css',
    excludeFiles: ['bundle.css', 'build.js', 'README.md']
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É
function readFile(filePath) {
    try {
        return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${filePath}:`, error.message);
        return '';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ @import
function processImports(content, baseDir) {
    const importRegex = /@import\s+url\(['"]([^'"]+)['"]\);/g;
    let processedContent = content;
    let match;

    while ((match = importRegex.exec(content)) !== null) {
        const importPath = match[1];
        const fullPath = path.join(baseDir, importPath);
        
        if (fs.existsSync(fullPath)) {
            const importedContent = readFile(fullPath);
            const processedImported = processImports(importedContent, path.dirname(fullPath));
            
            processedContent = processedContent.replace(match[0], processedImported);
        } else {
            console.warn(`–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${fullPath}`);
        }
    }

    return processedContent;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±—ñ—Ä–∫–∏ CSS
function buildCSS() {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–±—ñ—Ä–∫–∏ CSS...');
    
    const mainFilePath = path.join(CONFIG.inputDir, CONFIG.mainFile);
    
    if (!fs.existsSync(mainFilePath)) {
        console.error(`‚ùå –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${CONFIG.mainFile}`);
        return false;
    }

    // –ß–∏—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª
    let content = readFile(mainFilePath);
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏
    content = processImports(content, CONFIG.inputDir);
    
    // –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–±—ñ—Ä–∫—É
    const buildInfo = `/*
 * Stay on the Board - CSS Bundle
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}
 * –ó —Ñ–∞–π–ª—ñ–≤: ${CONFIG.mainFile}
 * 
 * –¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –î–ª—è –∑–º—ñ–Ω —Ä–µ–¥–∞–≥—É–π—Ç–µ –æ–∫—Ä–µ–º—ñ –º–æ–¥—É–ª—ñ.
 */

`;
    
    const finalContent = buildInfo + content;
    
    // –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try {
        fs.writeFileSync(CONFIG.outputFile, finalContent, 'utf8');
        console.log(`‚úÖ CSS –∑–±—ñ—Ä–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${CONFIG.outputFile}`);
        console.log(`üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: ${(finalContent.length / 1024).toFixed(2)} KB`);
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Ñ–∞–π–ª—É:', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º—ñ–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó CSS
function minifyCSS() {
    const bundlePath = CONFIG.outputFile;
    
    if (!fs.existsSync(bundlePath)) {
        console.error('‚ùå –§–∞–π–ª –∑–±—ñ—Ä–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∑–±—ñ—Ä–∫—É.');
        return false;
    }
    
    let content = readFile(bundlePath);
    
    // –ü—Ä–æ—Å—Ç–∞ –º—ñ–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —Ç–∞ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤)
    content = content
        .replace(/\/\*[\s\S]*?\*\//g, '') // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        .replace(/\s+/g, ' ') // –ó–∞–º—ñ–Ω—è—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –æ–¥–∏–Ω
        .replace(/\s*{\s*/g, '{') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–æ–∫
        .replace(/\s*}\s*/g, '}') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–æ–∫
        .replace(/\s*:\s*/g, ':') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ –¥–≤–æ–∫—Ä–∞–ø–∫–∏
        .replace(/\s*;\s*/g, ';') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ –∫—Ä–∞–ø–∫–∏ –∑ –∫–æ–º–æ—é
        .replace(/\s*,\s*/g, ',') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ –∫–æ–º–∏
        .trim();
    
    const minifiedPath = path.join(CONFIG.inputDir, 'bundle.min.css');
    
    try {
        fs.writeFileSync(minifiedPath, content, 'utf8');
        console.log(`‚úÖ –ú—ñ–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π CSS —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${minifiedPath}`);
        console.log(`üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: ${(content.length / 1024).toFixed(2)} KB`);
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É:', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
function validateStructure() {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ CSS...');
    
    const requiredDirs = ['base', 'themes', 'components', 'layouts'];
    const requiredFiles = [
        'base/variables.css',
        'themes/peak.css',
        'themes/cs2.css',
        'components/game-board.css',
        'components/controls.css',
        'components/modals.css',
        'layouts/main-menu.css',
        'main.css'
    ];
    
    let isValid = true;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    for (const dir of requiredDirs) {
        const dirPath = path.join(CONFIG.inputDir, dir);
        if (!fs.existsSync(dirPath)) {
            console.error(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: ${dir}`);
            isValid = false;
        } else {
            console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞: ${dir}`);
        }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
    for (const file of requiredFiles) {
        const filePath = path.join(CONFIG.inputDir, file);
        if (!fs.existsSync(filePath)) {
            console.error(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª: ${file}`);
            isValid = false;
        } else {
            const stats = fs.statSync(filePath);
            console.log(`‚úÖ –§–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: ${file} (${(stats.size / 1024).toFixed(2)} KB)`);
        }
    }
    
    return isValid;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
    const args = process.argv.slice(2);
    const command = args[0] || 'build';
    
    switch (command) {
        case 'build':
            if (validateStructure()) {
                buildCSS();
            } else {
                console.error('‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ CSS –Ω–µ–¥—ñ–π—Å–Ω–∞');
                process.exit(1);
            }
            break;
            
        case 'minify':
            minifyCSS();
            break;
            
        case 'validate':
            validateStructure();
            break;
            
        case 'watch':
            console.log('üëÄ –†–µ–∂–∏–º —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ...');
            console.log('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏');
            
            // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ –≤ CSS —Ñ–∞–π–ª–∞—Ö
            const chokidar = require('chokidar');
            const watcher = chokidar.watch(path.join(CONFIG.inputDir, '**/*.css'), {
                ignored: /bundle\.(css|min\.css)$/
            });
            
            watcher.on('change', (filePath) => {
                console.log(`üìù –§–∞–π–ª –∑–º—ñ–Ω–µ–Ω–æ: ${path.relative(CONFIG.inputDir, filePath)}`);
                buildCSS();
            });
            
            break;
            
        default:
            console.log(`
üéÆ CSS Builder –¥–ª—è Stay on the Board

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  node build.js [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥–∏:
  build     - –ó—ñ–±—Ä–∞—Ç–∏ CSS (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
  minify    - –ú—ñ–Ω—ñ—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∑—ñ–±—Ä–∞–Ω–∏–π CSS
  validate  - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—ñ–≤
  watch     - –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–∏—Ä–∞—Ç–∏

–ü—Ä–∏–∫–ª–∞–¥–∏:
  node build.js build
  node build.js minify
  node build.js validate
  node build.js watch
            `);
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–ª–∏–∫–∞–Ω–æ –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
    main();
}

module.exports = {
    buildCSS,
    minifyCSS,
    validateStructure
}; 