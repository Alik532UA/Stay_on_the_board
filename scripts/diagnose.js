#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —à–≤–∏–¥–∫–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∞–π—Ç—É
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/diagnose.js
 */

import { execSync, spawn } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∞–π—Ç—É Stay on the Board...\n');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—É
function checkFile(path, description) {
  try {
    if (existsSync(path)) {
      const content = readFileSync(path, 'utf8');
      console.log(`‚úÖ ${description}: ${path} (${content.length} —Å–∏–º–≤–æ–ª—ñ–≤)`);
      return true;
    } else {
      console.log(`‚ùå ${description}: ${path} - –§–ê–ô–õ –í–Ü–î–°–£–¢–ù–Ü–ô`);
      return false;
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è ${description}: ${path} - –ü–û–ú–ò–õ–ö–ê: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
function checkDirectory(path, description) {
  try {
    if (existsSync(path)) {
      console.log(`‚úÖ ${description}: ${path}`);
      return true;
    } else {
      console.log(`‚ùå ${description}: ${path} - –î–ò–†–ï–ö–¢–û–†–Ü–Ø –í–Ü–î–°–£–¢–ù–Ø`);
      return false;
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è ${description}: ${path} - –ü–û–ú–ò–õ–ö–ê: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥–∏
function checkCommand(command, description) {
  try {
    execSync(command, { stdio: 'pipe' });
    console.log(`‚úÖ ${description}: ${command}`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${description}: ${command} - –ü–û–ú–ò–õ–ö–ê: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
console.log('üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É:');
const criticalFiles = [
  ['package.json', 'Package.json'],
  ['vite.config.ts', 'Vite –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è'],
  ['svelte.config.js', 'Svelte –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è'],
  ['tsconfig.json', 'TypeScript –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è'],
  ['src/app.html', '–û—Å–Ω–æ–≤–Ω–∏–π HTML —Ñ–∞–π–ª'],
  ['src/routes/+page.svelte', '–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞'],
  ['src/lib/stores/gameState.ts', 'Game State'],
  ['src/lib/stores/animationStore.js', 'Animation Store'],
  ['src/lib/services/gameLogicService.ts', 'Game Logic Service'],
  ['src/lib/gameOrchestrator.js', 'Game Orchestrator']
];

let fileErrors = 0;
for (const [path, description] of criticalFiles) {
  if (!checkFile(path, description)) {
    fileErrors++;
  }
}

console.log('\nüìÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π:');
const criticalDirs = [
  ['src', 'Source –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è'],
  ['src/routes', 'Routes –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è'],
  ['src/lib', 'Lib –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è'],
  ['src/lib/stores', 'Stores –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è'],
  ['src/lib/services', 'Services –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è'],
  ['src/lib/components', 'Components –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è'],
  ['static', 'Static –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è']
];

let dirErrors = 0;
for (const [path, description] of criticalDirs) {
  if (!checkDirectory(path, description)) {
    dirErrors++;
  }
}

console.log('\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:');
try {
  const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
  const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const criticalDeps = ['svelte', '@sveltejs/kit', 'vite'];
  for (const dep of criticalDeps) {
    if (deps[dep]) {
      console.log(`‚úÖ –ö—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: ${dep}@${deps[dep]}`);
    } else {
      console.log(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: ${dep}`);
      fileErrors++;
    }
  }
} catch (error) {
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è package.json: ${error.message}`);
  fileErrors++;
}

console.log('\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥:');
const commands = [
  ['npm --version', 'NPM'],
  ['node --version', 'Node.js'],
  ['npx --version', 'NPX']
];

let commandErrors = 0;
for (const [command, description] of commands) {
  if (!checkCommand(command, description)) {
    commandErrors++;
  }
}

console.log('\nüöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É dev —Å–µ—Ä–≤–µ—Ä–∞:');
console.log('–°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É dev —Å–µ—Ä–≤–µ—Ä–∞...');

try {
  const devProcess = spawn('npm', ['run', 'dev'], {
    stdio: ['pipe', 'pipe', 'pipe'],
    timeout: 10000
  });

  let serverStarted = false;
  let output = '';

  devProcess.stdout.on('data', (data) => {
    output += data.toString();
    if (output.includes('Local:') && !serverStarted) {
      const portMatch = output.match(/Local:\s+http:\/\/localhost:(\d+)/);
      if (portMatch) {
        console.log(`‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–≤—Å—è –Ω–∞ –ø–æ—Ä—Ç—É ${portMatch[1]}`);
        serverStarted = true;
        devProcess.kill();
      }
    }
  });

  devProcess.stderr.on('data', (data) => {
    output += data.toString();
  });

  devProcess.on('close', (code) => {
    if (!serverStarted) {
      console.log(`‚ùå Dev —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è (–∫–æ–¥: ${code})`);
      console.log('–í–∏–≤—ñ–¥:', output);
      commandErrors++;
    }
  });

  devProcess.on('error', (error) => {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É dev —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    commandErrors++;
  });

} catch (error) {
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É dev —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
  commandErrors++;
}

// –ü—ñ–¥—Å—É–º–æ–∫
console.log('\nüìä –ü–Ü–î–°–£–ú–û–ö –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò:');
console.log(`–§–∞–π–ª–∏: ${criticalFiles.length - fileErrors}/${criticalFiles.length} ‚úÖ`);
console.log(`–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: ${criticalDirs.length - dirErrors}/${criticalDirs.length} ‚úÖ`);
console.log(`–ö–æ–º–∞–Ω–¥–∏: ${commands.length - commandErrors}/${commands.length} ‚úÖ`);

const totalErrors = fileErrors + dirErrors + commandErrors;

if (totalErrors === 0) {
  console.log('\nüéâ –í–°–ï –î–û–ë–†–ï! –°–∞–π—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.');
  process.exit(0);
} else {
  console.log(`\n‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ ${totalErrors} –ø—Ä–æ–±–ª–µ–º. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.`);
  process.exit(1);
} 