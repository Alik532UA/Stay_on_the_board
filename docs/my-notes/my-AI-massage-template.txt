# Message template for communicating with AI

=======================================================================================
Актуальний результат: 
Очікуваний результат: 
=======================================================================================
Покращ ui та ux
=======================================================================================
Продовжуй виконувати план
відміть чекбокси, що вже зроблено
=======================================================================================
продовжуй
=======================================================================================
npm run check
=======================================================================================
npm run check
npm test -- tests/ssr-initialization.test.ts
npx playwright test tests/game-page-startup.test.ts
=======================================================================================
npx playwright test --headed
npx playwright test --grep "@GF-1"

npx playwright test tests/game-mode-modal.spec.ts
npx playwright test tests/game-flow.spec.ts --headed
=======================================================================================
Роби як вважаєш буде краще для проєкту
=======================================================================================
1. Проаналізуй всі файли документації
2. Реорганізуй їх по папках, зроби рефакторінг назв файлів
3. Видали застарілі, об'єднай ті що треба об'єднати, розділи ті що треба розділити, тобто зроби генеральне прибирання
4. Покращ документацію
5. всі виконані improvement та plan треба помістити в якусь папку done
6. для всіх фалів md та txt розробити єдину структуру, наприклад: тип, статус, назва, опис
7. Додай в усі баг репорти в папці done, додай статус "виконано"
підготуй md файл для курсор
=======================================================================================
в плані додай чекбокси та відміть те що вже зроблено, тобто актуалізуй план
"architecture-improvement-plan-v3.md"
=======================================================================================
Що протестувати після цих змін?
Які частини логіки ми зачепили, і що в теорії могло поламатися?
=======================================================================================
розпиши детальний покроковий план в md
=======================================================================================
вже декілька разів ця проблема ставалось і декілька разів ми її виправляли
потрібно навколо цієї проблеми зробити рефакторінг, щоб все було написано правильно, щоб після чергового рефакторінгу, ця помилка не повернулась
=======================================================================================
ти використав багато спроб, але проблема досі є.
тож скористайся:
3.  **Реалізація:** Напиши код, дотримуючись архітектурних принципів та стандартів кодування.
4.  **Відладка (Дебагінг):**
    *   **Використовуй `logService`:** Замість `console.log` завжди використовуй централізований `logService`.
    *   **Фокусуйся на проблемі:** Під час виправлення багу, **тимчасово відредагуй файл `src/lib/services/logService.js`**. Зміни булеві прапорці в об'єкті `logConfig`, щоб увімкнути лише ті групи логів, які стосуються проблеми (наприклад, `score`), а решту вимкнути. Це допоможе усунути інформаційний шум.
    *   **Незмінність логів:** Параметри логування не змінюй, доки розробник не підтвердить, що баг виправлено.
5.  **Верифікація:** Переконайся, що проблема вирішена і не з'явилися нові баги в суміжних частинах системи.
=======================================================================================
Створи файл `architecture-improvement-plan-v15.md` в папці "\Stay_on_the_board\docs\plans"
у першій частині:
Проведи комплексний аудит коду за наступними критеріями:

**Архітектура та Структура:**
1.  **SSoT (Single Source of Truth):** Чи є єдине джерело правди для кожного елемента стану?
2.  **UDF (Unidirectional Data Flow):** Чи є потік даних односпрямованим та передбачуваним?
3.  **SoC (Separation of Concerns):** Наскільки добре розділені відповідальності (стан, логіка, UI)?
4.  **Композиція:** Чи ефективно використовуються компоненти для побудови UI?
5.  **Чистота та Побічні ефекти:** Наскільки добре ізольовані "нечисті" операції (API, DOM, таймери)?

**Якість Коду та Реалізації:**
6.  **DRY (Don't Repeat Yourself):** Чи є дублювання коду, яке можна усунути?
7.  **Простота та Читабельність (KISS):** Чи є надмірно складні рішення? Наскільки код зрозумілий (якість іменування)?
8.  **Продуктивність:** Чи є потенційні проблеми зі швидкістю (зайві обчислення, перерендери)?
9.  **Документація та Коментарі:** Чи коментарі пояснюють *навіщо*, а не *що*?

Вистави оцінку від 0 до 100 по кожному з пунктів 

у другій частині:
випиши пункти для покращення
випиши список проблем і розтав по пріоритету, напроти кожної задачі вистав на скільки важливо це треба зробити де 0 = не важливо, 100 = без цього далі працювати не буде

ціль: треба підготувати код до масштабування, а саме до майбутнього розширення ігрових режимів: "Гра онлайн"

в плані використовуй чекбокси для того щоб можна було відмічати пункти які вже зроблено

надважливе завдання не поламати логіку:
1. візуалізація дошки "game-board" не повинна впливати на "center-info" та на логіку гри
2. "center-info" та логіка гри не повинна знати про візуалізація дошки "game-board"
логіка гри не повинна знати та залежати від візуалізації на дошці
надважливе завдання: взяти до уваги попередження коді (в коментаріях) щодо логіки яка може зламатися під час рефакторінгу
=======================================================================================
Твоє рішення має бути комплексним. Не роби поверхневих виправлень ("латок" чи "костилів").
**Реалізуй системне виправлення**, яке усуває корінь проблеми та відповідає цільовій архітектурі проєкту.
при виправленні використовуй принципи:
1.  **SSoT (Single Source of Truth):** Чи є єдине джерело правди для кожного елемента стану?
2.  **UDF (Unidirectional Data Flow):** Чи є потік даних односпрямованим та передбачуваним?
3.  **SoC (Separation of Concerns):** Наскільки добре розділені відповідальності (стан, логіка, UI)?
4.  **Композиція:** Чи ефективно використовуються компоненти для побудови UI?
5.  **Чистота та Побічні ефекти:** Наскільки добре ізольовані "нечисті" операції (API, DOM, таймери)?
6.  **DRY (Don't Repeat Yourself):** Чи є дублювання коду, яке можна усунути?
7.  **Простота та Читабельність (KISS):** Чи є надмірно складні рішення? Наскільки код зрозумілий (якість іменування)?
8.  **Продуктивність:** Чи є потенційні проблеми зі швидкістю (зайві обчислення, перерендери)?
9.  **Документація та Коментарі:** Чи коментарі пояснюють *навіщо*, а не *що*?
=======================================================================================
**Ключова вимога:** Твоє рішення має бути комплексним. Не роби поверхневих виправлень ("латок" чи "костилів"). Замість цього:
1.  **Проаналізуй першопричину** проблеми.
2.  **Перевір зв'язок** з задачами в архітектурному плані: `@/docs/plans/architecture-improvement-plan-v14.md`.
3.  **Реалізуй системне виправлення**, яке усуває корінь проблеми та відповідає цільовій архітектурі проєкту.
=======================================================================================
**Протокол дій при падінні автотесту:**

1.  **Зупинись.** Не намагайся одразу виправляти код.
2.  **Проаналізуй помилку,** щоб зрозуміти, яка саме поведінка перевірялася.
3.  **Запитай мене.** Сформулюй питання у форматі:
    "Автотест `[Назва тесту]` не пройшов з помилкою: `[Короткий опис помилки]`. Будь ласка, перевір вручну в браузері, чи є ця поведінка багом. Дай відповідь одним з двох варіантів:
    *   `Тест правий` (якщо в браузері є баг)
    *   `Код правий` (якщо в браузері все працює, а тест застарів)"
4.  **Чекай моєї відповіді** і дій згідно з нею.
=======================================================================================
проаналізуй всі плани: architecture-improvement-plan-v№.md
після реалізації кожного з планів від 30% до 80% функціоналу гри перестає працювати
автотести ті що перевіряються функції, не допомагають, бо коли у мене пів програми не працює автотести показуються, що все добре.
автотести ми як рішення не розглядаємо
а ще оцінки архітектури та коду не стають значно кращіми, а іноді і гіршими
бо ми вже виконали десятки планів, а оцінка все одно приблизно від 60 до 80
які є варіанти вирішення цієї проблеми?
=======================================================================================
p.s.занеси цю перевірку в чекліст

=======================================================================================
=======================================================================================
=======================================================================================
=======================================================================================
=======================================================================================
=======================================================================================
=======================================================================================
