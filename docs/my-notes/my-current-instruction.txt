**Правила**: Ознайомся та дотримуйся правил з @/docs/my-notes/AI_AGENT_RULES.md 
**Мова**: мова роздумів та відповіді в чаті лише українська. Англійською не пиши, а заощаджуй токени.
**Опис дії**: Перейди на стислий режим: мінімум пояснень (приблизно до 200 символів, але бажано 30-70 символів), максимум дій.

Поточнє завдання:

docs\plans\architecture-improvement-plan-v14.md:46-80
```
План Покращень для Масштабування

Мета: підготувати архітектуру до реалізації режиму "Гра онлайн".

### Список Завдань (пріоритет від 100 до 0)

- [ ] **(100) Формалізувати систему обробки дій та подій.**
  - **Проблема:** Поточна система, де сервіси повертають `SideEffect[]`, добре працює для локальної гри, але може бути недостатньо надійною для мережевої взаємодії.
  - **Рішення:** Створити централізовану шину подій або чергу команд (`Command Queue`). `userActionService` має перетворювати дії користувача на команди. Це дозволить обробляти команди з різних джерел (локальний UI, мережа, система повторів) однаково.
  - **Важливість:** Критично для розділення вводу користувача від ігрової логіки.

- [ ] **(95) Створити абстракцію для джерела вводу.**
  - **Проблема:** Зараз дії гравця надходять безпосередньо з UI (`ControlsPanelWidget`). В онлайн-грі дії опонента надходитимуть з мережі.
  - **Рішення:** Модифікувати `userActionService`, щоб він не залежав від UI. Створити "провайдерів вводу" (Input Providers), які б транслювали події (клік кнопки, мережевий пакет) у стандартизовані команди для `userActionService`.
  - **Важливість:** Необхідно, щоб логіка гри не знала, звідки прийшла команда на хід.

- [ ] **(90) Створити `OnlineGameMode`.**
  - **Проблема:** Потрібна інкапсуляція логіки, специфічної для онлайн-гри.
  - **Рішення:** За аналогією з існуючими режимами, створити клас `OnlineGameMode extends BaseGameMode`. Цей клас буде відповідати за відправку ходів на сервер, отримання ходів опонента та обробку мережевих подій (наприклад, розрив з'єднання).
  - **Важливість:** Дотримання існуючої архітектури для чистоти та розширюваності коду.

- [ ] **(80) Розробити механізм синхронізації та звірки стану.**
  - **Проблема:** В онлайн-грі стан клієнта може розсинхронізуватися зі станом сервера.
  - **Рішення:** Реалізувати механізм, за допомогою якого гра періодично або за запитом отримує авторитетний стан від сервера і м'яко коригує локальний `gameState`. Це може включати в себе порівняння історії ходів.
  - **Важливість:** Забезпечення консистентності гри для всіх гравців.

- [ ] **(60) Ізолювати мутації `gameState` в одному місці.**
  - **Проблема:** Хоча `gameLogicService` є основним мутатором, деякі зміни стану (наприклад, `currentPlayerIndex`) відбуваються в `BaseGameMode`.
  - **Рішення:** Розглянути можливість створення єдиного "мутатора" або сервісу, який би був єдиною точкою входу для всіх змін `gameState`. `gameLogicService` міг би повертати не просто результат, а об'єкт "зміни стану", який би застосовувався цим центральним мутатором.
  - **Важливість:** Підвищення передбачуваності та полегшення налагодження, особливо в асинхронному мережевому середовищі.

- [ ] **(40) Розширити `testModeStore` для симуляції мережевих умов.**
  - **Проблема:** Розробка та тестування онлайн-режиму ускладнюється через непередбачуваність мережі.
  - **Рішення:** Додати в `testModeStore` можливість симулювати затримку (latency) та втрату пакетів для тестування стійкості `OnlineGameMode` та логіки синхронізації.
  - **Важливість:** Значно прискорить розробку та підвищить якість онлайн-режиму.
```

