**Правила**: Ознайомся та дотримуйся правил з @/docs/my-notes/AI_AGENT_RULES.md 
**Мова**: мова роздумів та відповіді в чаті лише українська. Англійською не пиши, а заощаджуй токени.
**Опис дії**: Перейди на стислий режим: мінімум пояснень (приблизно до 200 символів, але бажано 30-70 символів), максимум дій.

Поточнє завдання:
виправити баг:

---

data-testid="opponent-trapped-modal"
натиснути data-testid="finish-game-with-bonus-btn"
Актуальний результат: залишилось вікно data-testid="opponent-trapped-modal"
Очікуваний результат: відкривається модальне вікно завершення гри

---

**Ключова вимога:** Твоє рішення має бути комплексним. Не роби поверхневих виправлень ("латок" чи "костилів").
**Реалізуй системне виправлення**, яке усуває корінь проблеми та відповідає цільовій архітектурі проєкту.
при виправленні використовуй принципи:
1.  **SSoT (Single Source of Truth):** Чи є єдине джерело правди для кожного елемента стану?
2.  **UDF (Unidirectional Data Flow):** Чи є потік даних односпрямованим та передбачуваним?
3.  **SoC (Separation of Concerns):** Наскільки добре розділені відповідальності (стан, логіка, UI)?
4.  **Композиція:** Чи ефективно використовуються компоненти для побудови UI?
5.  **Чистота та Побічні ефекти:** Наскільки добре ізольовані "нечисті" операції (API, DOM, таймери)?
6.  **DRY (Don't Repeat Yourself):** Чи є дублювання коду, яке можна усунути?
7.  **Простота та Читабельність (KISS):** Чи є надмірно складні рішення? Наскільки код зрозумілий (якість іменування)?
8.  **Продуктивність:** Чи є потенційні проблеми зі швидкістю (зайві обчислення, перерендери)?
9.  **Документація та Коментарі:** Чи коментарі пояснюють *навіщо*, а не *що*?

---

**Відладка (Дебагінг):**
    *   **Використовуй `logService`:** Замість `console.log` завжди використовуй централізований `logService`.
    *   **Доповнюй логи для аналізу:** Якщо поточний рівень логування не дозволяє діагностувати описану проблему, додай нові виклики logService у відповідних місцях коду. Мета — забезпечити, щоб майбутні логи містили всю інформацію, яка дозволить мені самостійно проаналізувати, чи вирішено проблему, і що саме потребує виправлення.
    *   **Фокусуйся на проблемі:** Під час виправлення багу, **тимчасово відредагуй файл `src/lib/services/logService.js`**. Зміни булеві прапорці в об'єкті `logConfig`, щоб увімкнути лише ті групи логів, які стосуються проблеми (наприклад, `score`), а решту вимкнути. Це допоможе усунути інформаційний шум.
    *   **Незмінність логів:** Параметри логування не змінюй, доки я (людина) не підтвердить, що баг виправлено. При порушені цього правила AI буде вимкнено та видалено.
**Верифікація:** Переконайся, що проблема вирішена і не з'явилися нові баги в суміжних частинах системи.

---

logService.js:92 [LOGIC] getAvailableMoves: Розрахунок завершено. Знайдено ходів: 0 Array(0)
logService.js:92 [GAME_MODE] triggerComputerMove: Результат getComputerMove: null
logService.js:94 [GAME_MODE] triggerComputerMove: У комп'ютера немає ходів, викликаємо handleNoMoves.
logService.js:94 [GAME_MODE] handleNoMoves: Обробка ситуації "немає ходів" для гравця типу: computer.
logService.js:92 [LOGIC] Executing side effect: ui/showModal Object
manifest.json:1   Failed to load resource: the server responded with a status of 404 (Not Found)
logService.js:92 [LOGIC] [userActionService] finishWithBonus called with reason: modal.gameOverReasonBonus
logService.js:92 [GAME_MODE] [VsComputerGameMode] endGame called with reason: modal.gameOverReasonBonus
logService.js:92 [LOGIC] Executing side effect: ui/showGameOverModal {reasonKey: 'modal.gameOverReasonBonus', reasonValues: null, finalScoreDetails: {…}, gameType: 'vs-computer', state: {…}}
