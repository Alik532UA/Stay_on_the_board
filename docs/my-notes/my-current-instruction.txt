src\lib\components\widgets\BoardWrapperWidget.svelte
```
<!--
ВАЖЛИВО! Архітектурний принцип: пауза (затримка) після ходу гравця реалізується лише у візуалізації дошки (animationStore),
логіка гри та center-info оновлюються миттєво і не залежать від цієї паузи. Це гарантує SoC, SSoT, UDF.
-->
<script lang="ts">
  // ВАЖЛИВО! Заборонено напряму змінювати moveQueue або board з UI-компонента!
  // Компонент лише спостерігає за станом гри і ініціює анімацію через animationStore.
  // Всі зміни логіки гри — лише через оркестратор/сервіси.
  import { gameState } from '$lib/stores/gameState.js';
  import { settingsStore } from '$lib/stores/settingsStore.js';
  import { modalStore } from '$lib/stores/modalStore.js';
  import { slide } from 'svelte/transition'; // <--- КРОК 1: Імпортуємо slide
  import { quintOut } from 'svelte/easing';
  import { animationStore } from '$lib/stores/animationStore.js';
  import { visualPosition, visualCellVisitCounts, visualBoardState, currentPlayer, availableMoves } from '$lib/stores/derivedState.ts';
  import { derived, get } from 'svelte/store';
  import { onMount } from 'svelte';
  import { uiEffectsStore } from '$lib/stores/uiEffectsStore.js';
  import BoardCell from './BoardCell.svelte';
  import PlayerPiece from './PlayerPiece.svelte';
  import { logService } from '$lib/services/logService.js';
  import { enableAllGameCheckboxesIfNeeded } from '$lib/utils/uiUtils.ts';
  // КРОК 2: Імпортуємо isCellBlocked та getDamageClass, щоб виправити помилку TypeScript
  import { isCellBlocked, getDamageClass } from '$lib/utils/boardUtils.ts';

  const boardSize = derived(gameState, $gameState => $gameState ? Number($gameState.boardSize) : 0);

  /**
   * Кастомна Svelte-анімація, що поєднує slide та scale.
   * Це дозволяє одночасно плавно згортати блок і змінювати його масштаб.
   */
  function slideAndScale(node: HTMLElement, params: any) {
    const slideTransition = slide(node, params);
    return {
      duration: params.duration,
      easing: params.easing,
      css: (t: number, u: number) => `
        ${slideTransition.css ? slideTransition.css(t, u) : ''}
        transform-origin: top center;
        transform: scale(${t});
      `
    };
  }

  onMount(() => {
    let lastRow: number | null = null;
    let lastCol: number | null = null;

    const unsubscribe = gameState.subscribe(($gameState) => {
      if (!$gameState) return;

      if ($gameState.isFirstMove) {
        lastRow = $gameState.playerRow;
        lastCol = $gameState.playerCol;
        return;
      }

      if ($gameState.moveHistory.length === 1) {
        enableAllGameCheckboxesIfNeeded();
      }

      if (
        get(settingsStore).autoHideBoard &&
        get(settingsStore).showBoard &&
        ($gameState.playerRow !== lastRow || $gameState.playerCol !== lastCol) &&
        $gameState.moveHistory.length > 1
      ) {
        uiEffectsStore.autoHideBoard(0);
        lastRow = $gameState.playerRow;
        lastCol = $gameState.playerCol;
      }

      if (
        $gameState.moveQueue &&
        $gameState.moveQueue.length === 0 &&
        $gameState.moveHistory.length > 1 &&
        !$gameState.isComputerMoveInProgress
      ) {
        enableAllGameCheckboxesIfNeeded();
      }
    });
    return unsubscribe;
  });

  let prevGameId: number|null = null;
  gameState.subscribe(($gameState) => {
    if (!$gameState) {
      prevGameId = null;
      return;
    }
    if ($gameState.gameId !== prevGameId) {
      prevGameId = $gameState.gameId;
      logService.ui('[BoardWrapperWidget] Нова гра, скидаємо стан');
    }
  });

  const showAvailableMoves = derived(
    [settingsStore, animationStore, currentPlayer],
    ([$settingsStore, $animationStore, $currentPlayer]) => {
      return (
        $settingsStore.showMoves &&
        !$animationStore.isAnimating &&
        $currentPlayer?.type === 'human' &&
        $animationStore.isComputerMoveCompleted
      );
    }
  );

  function getMoveInfo(row: number, col: number) {
    if (!$showAvailableMoves) {
      return { isAvailable: false, isPenalty: false };
    }
    const move = get(availableMoves).find(m => m.row === row && m.col === col);
    if (move) {
      return { isAvailable: true, isPenalty: move.isPenalty || false };
    }
    return { isAvailable: false, isPenalty: false };
  }

  function showBoardClickHint(e: Event) {
    if (e && typeof e.stopPropagation === 'function') e.stopPropagation();
    modalStore.showModal({
      titleKey: 'modal.boardClickTitle',
      contentKey: 'modal.boardClickContent',
      buttons: [{ textKey: 'modal.ok', primary: true, isHot: true }],
      dataTestId: 'board-click-modal'
    });
  }

  function onCellRightClick(event: MouseEvent, row: number, col: number): void {
    event.preventDefault();
    if ($gameState && $settingsStore.blockModeEnabled && !(row === $gameState.playerRow && col === $gameState.playerCol)) {
      const visualCounts = get(visualCellVisitCounts);
      const blocked = isCellBlocked(row, col, visualCounts, $settingsStore);
      logService.ui(`${blocked ? 'Розблокування' : 'Блокування'} клітинки [${row},${col}]`);
    }
  }
</script>

{#if $gameState}
  {#key $gameState.gameId}
    {#if $settingsStore.showBoard}
      <div
        class="board-bg-wrapper game-content-block"
        style="--board-size: {$boardSize}"
        onclick={showBoardClickHint}
        onkeydown={(e) => (e.key === 'Enter' || e.key === ' ') && showBoardClickHint(e)}
        role="button"
        tabindex="0"
        aria-label="Ігрове поле"
        transition:slideAndScale={{ duration: 500, easing: quintOut }}
      >
        <div class="game-board" style="--board-size: {$boardSize}" role="grid" data-testid="game-board">
          {#each Array($boardSize) as _, rowIdx (rowIdx)}
            {#each Array($boardSize) as _, colIdx (colIdx)}
              {@const moveInfo = getMoveInfo(rowIdx, colIdx)}
              <BoardCell
                {rowIdx}
                {colIdx}
                visualCellVisitCounts={$visualCellVisitCounts}
                settingsStore={$settingsStore}
                isAvailable={moveInfo.isAvailable}
                isPenalty={moveInfo.isPenalty}
                visualPosition={$visualPosition}
                boardState={$visualBoardState}
                gameState={$gameState}
                on:cellRightClick={(e) => onCellRightClick(e.detail.event, e.detail.row, e.detail.col)}
              />
            {/each}
          {/each}
          
          {#if $settingsStore.showPiece && $visualPosition.row !== null && $visualPosition.col !== null}
            <PlayerPiece
              row={$visualPosition.row}
              col={$visualPosition.col}
              boardSize={$boardSize}
            />
          {/if}
        </div>
      </div>
    {/if}
  {/key}
{/if}

<style>
  /* Стилі залишаються без змін, оскільки transition:slideAndScale не потребує додаткових CSS */
</style>
```

src\lib\components\widgets\GameInfoWidget.svelte
```
<script lang="ts">
  import { derived } from 'svelte/store';
  import { gameState } from '$lib/stores/gameState.js';
  import { settingsStore } from '$lib/stores/settingsStore.js';
  import { _ } from 'svelte-i18n';
  import { lastComputerMove, lastPlayerMove, isPlayerTurn, isPauseBetweenMoves } from '$lib/stores/derivedState.ts';
  import { i18nReady } from '$lib/i18n/init.js';
  import { fade, slide } from 'svelte/transition';
  import { quintOut } from 'svelte/easing';

  // --- Допоміжні функції ---
  function getPlayerColor(players: any[], playerName: string): string | null {
    const player = players.find(p => p.name === playerName);
    return player ? player.color : null;
  }

  function getPlayerNameStyle(players: any[], playerName: string): string {
    const color = getPlayerColor(players, playerName);
    return color ? `background-color: ${color};` : '';
  }

  const directionArrows: Record<string, string> = {
    'up-left': '↖', 'up': '↑', 'up-right': '↗',
    'left': '←', 'right': '→',
    'down-left': '↙', 'down': '↓', 'down-right': '↘'
  };

  // --- Derived стор для генерації повідомлень ---
  const displayMessage = derived(
    [gameState, lastComputerMove, lastPlayerMove, isPlayerTurn, isPauseBetweenMoves, _, settingsStore],
    ([$gameState, $lastComputerMove, $lastPlayerMove, $isPlayerTurn, $isPauseBetweenMoves, $_, $settingsStore]) => {
      if (!$gameState) return '';

      const isCompact = $settingsStore.showGameInfoWidget === 'compact';
      const humanPlayersCount = $gameState.players.filter(p => p.type === 'human').length;
      const isLocalGame = humanPlayersCount > 1;

      if ($gameState.isGameOver) return $_('gameBoard.gameInfo.gameOver');
      if ($gameState.isFirstMove) {
        if (isLocalGame) {
          const currentPlayer = $gameState.players[$gameState.currentPlayerIndex];
          const playerStyle = getPlayerNameStyle($gameState.players, currentPlayer.name);
          return `Гра почалась!<br><div><span class="player-name-plate" style="${playerStyle}">${currentPlayer.name}</span>, ваша черга робити хід</div>`;
        }
        return $_('gameBoard.gameInfo.firstMove');
      }
      if ($gameState.wasResumed) return $_('gameBoard.gameInfo.gameResumed');

      if ($lastComputerMove && !$isPauseBetweenMoves) {
        // КРОК 3: Виправлення помилки локалізації
        const directionKey = $lastComputerMove.direction.replace(/-(\w)/g, (_, c) => c.toUpperCase());
        const direction = $_(`gameBoard.directions.${directionKey}`);
        const distance = $lastComputerMove.distance;

        if (isCompact) {
          const arrow = directionArrows[$lastComputerMove.direction] || '?';
          return {
            isCompact: true,
            part1: $_('gameBoard.gameInfo.computerMadeMovePart1'),
            move: `${arrow}${distance}`,
            part2: $_('gameBoard.gameInfo.computerMadeMovePart2')
          };
        }
        return $_('gameBoard.gameInfo.computerMadeMove', { values: { direction, distance } });
      }

      if ($lastPlayerMove && !$isPauseBetweenMoves && isLocalGame) {
        const currentPlayer = $gameState.players[$gameState.currentPlayerIndex];
        const previousPlayerIndex = ($gameState.currentPlayerIndex + $gameState.players.length - 1) % $gameState.players.length;
        const previousPlayer = $gameState.players[previousPlayerIndex];
        const previousPlayerStyle = getPlayerNameStyle($gameState.players, previousPlayer.name);
        const currentPlayerStyle = getPlayerNameStyle($gameState.players, currentPlayer.name);
        const directionKey = $lastPlayerMove.direction.replace(/-(\w)/g, (_, c) => c.toUpperCase());
        const direction = $_(`gameBoard.directions.${directionKey}`);
        return `<div class="message-line-1"><span class="player-name-plate" style="${previousPlayerStyle}">${previousPlayer.name}</span> зробив хід: ${direction} на ${$lastPlayerMove.distance}.</div><div class="message-line-2"><span class="player-name-plate" style="${currentPlayerStyle}">${currentPlayer.name}</span> ваша черга робити хід!</div>`;
      }

      if ($isPauseBetweenMoves) return $_('gameBoard.gameInfo.pauseBetweenMoves');

      if ($isPlayerTurn) {
        if (isLocalGame) {
          const currentPlayer = $gameState.players[$gameState.currentPlayerIndex];
          const currentPlayerStyle = getPlayerNameStyle($gameState.players, currentPlayer.name);
          return `Хід гравця: <span class="player-name-plate" style="${currentPlayerStyle}">${currentPlayer.name}</span>`;
        }
        return $_('gameBoard.gameInfo.playerTurn');
      }

      if (!$isPlayerTurn) return $_('gameBoard.gameInfo.computerTurn');

      return $_('gameBoard.gameInfo.gameStarted');
    }
  );
</script>

<style>
  .game-info-widget {
    background: var(--bg-secondary);
    padding: 20px 12px;
    border-radius: var(--unified-border-radius);
    box-shadow: var(--dynamic-widget-shadow) var(--current-player-shadow-color);
    font-size: 1.1em;
    color: var(--text-primary, #222);
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: var(--unified-backdrop-filter);
    border: var(--unified-border);
    /* overflow: hidden; -- видалено для slide */
  }

  .game-info-content {
    font-weight: 500;
    line-height: 1.4;
    width: 100%;
    word-wrap: break-word;
    white-space: pre-line;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  :global(.message-line-1), :global(.message-line-2) {
    text-align: center;
    width: 100%;
  }

  :global(.player-name-plate) {
   display: inline-block;
   padding: 0px 8px;
   border-radius: 12px;
   color: #ffffff;
   font-weight: bold;
   text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
   border: 1px solid rgba(255, 255, 255, 0.3);
   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
   transition: all 0.3s ease;
  }

  :global(.compact-move-display) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: orange !important;
    color: #fff !important;
    font-weight: bold !important;
    border-radius: 12px;
    padding: 2px 10px;
    margin: 0 4px;
    font-family: 'M PLUS Rounded 1c', sans-serif !important;
    min-width: 40px;
    min-height: 28px;
    font-size: 1.1em;
  }

  .compact-message-line {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    flex-wrap: wrap;
  }
</style>

{#if $i18nReady && $gameState}
  {#if $settingsStore.showGameInfoWidget !== 'hidden'}
    <div class="game-info-widget"
         class:compact={$settingsStore.showGameInfoWidget === 'compact'}
         transition:slide={{ duration: 400, easing: quintOut }}
         data-testid="game-info-panel"
    >
      <div class="game-info-content" data-testid="game-info-content">
        {#key $displayMessage}
          <div class="fade-wrapper" in:fade={{ duration: 250, delay: 250 }} out:fade={{ duration: 250 }}>
            {#if typeof $displayMessage === 'object' && $displayMessage.isCompact}
              <div class="compact-message-line">
                <span>{$displayMessage.part1}</span>
                <span class="compact-move-display">{$displayMessage.move}</span>
              </div>
              <span>{$displayMessage.part2}</span>
            {:else}
              {@html $displayMessage}
            {/if}
          </div>
        {/key}
      </div>
    </div>
  {/if}
{/if}
```

data-testid="game-info-panel" class="game-info-widget s--msS_1jZMzGA compact"
Актуальний результат: оновлений текст з'являється різко
1. різко змінюється розмір data-testid="game-info-panel", стає більшим (скріншот)
2. попередній текст (за 500 мілісекунд) зменшується з 100% до 0%
3. текст міняється на новий
4. новий текст (на 500 мілісекунд) збільшується з 0% до 100%
Очікуваний результат: оновлений текст з'являється через анімацію прозорості
1. попередній текст (за 500 мілісекунд) зменшується з 100% до 0%
2. текст міняється на новий
3. новий текст (на 500 мілісекунд) збільшується з 0% до 100%

---

якщо потрібні ще якісь файли для виправлення, то напиши мені
не пиши інструкцію
напиши повний оновлений текст коду, в блоке для копіювання