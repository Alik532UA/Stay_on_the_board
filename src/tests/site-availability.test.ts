import { describe, test, expect, beforeAll, afterAll } from 'vitest';
import { spawn } from 'child_process';
import { createServer } from 'http';
import { readFileSync } from 'fs';
import { join } from 'path';

describe('Site Availability Tests', () => {
  let devServer: any = null;
  let serverPort: number | null = null;

  beforeAll(async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ dev —Å–µ—Ä–≤–µ—Ä...');
    
    devServer = spawn('npm', ['run', 'dev'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: true
    });

    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —ñ –æ—Ç—Ä–∏–º–∞—î–º–æ –ø–æ—Ä—Ç
    await new Promise((resolve) => {
      devServer.stdout.on('data', (data: any) => {
        const output = data.toString();
        console.log('üìù Dev server output:', output);
        
        // –®—É–∫–∞—î–º–æ –ø–æ—Ä—Ç –≤ –≤–∏–≤–æ–¥—ñ
        const portMatch = output.match(/Local:\s*http:\/\/localhost:(\d+)/);
        if (portMatch) {
          serverPort = parseInt(portMatch[1]);
          console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–≤—Å—è –Ω–∞ –ø–æ—Ä—Ç—É ${serverPort}`);
          resolve(true);
        }
      });

      // –¢–∞–π–º–∞—É—Ç
      setTimeout(() => {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
        resolve(false);
      }, 10000);
    });
  });

  afterAll(() => {
    if (devServer) {
      devServer.kill();
    }
  });

  test('–°–∞–π—Ç –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫', async () => {
    expect(serverPort).toBeDefined();
    expect(serverPort).toBeGreaterThan(0);
    console.log(`‚úÖ –°–∞–π—Ç –∑–∞–ø—É—Å—Ç–∏–≤—Å—è –Ω–∞ –ø–æ—Ä—Ç—É ${serverPort}`);
  });

  test('–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏', async () => {
    if (!serverPort) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è');
    }

    try {
      const response = await fetch(`http://localhost:${serverPort}/Stay_on_the_board`);
      expect(response.status).toBe(200);
      console.log('‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error);
      throw error;
    }
  });

  test('SvelteKit –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏', async () => {
    if (!serverPort) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è');
    }

    const routes = [
      '/Stay_on_the_board',
      '/Stay_on_the_board/about',
      '/Stay_on_the_board/game',
      '/Stay_on_the_board/controls',
      '/Stay_on_the_board/settings'
    ];

    for (const route of routes) {
      try {
        const response = await fetch(`http://localhost:${serverPort}${route}`);
        console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç ${route}: ${response.status}`);
        expect(response.status).toBe(200);
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Ä—à—Ä—É—Ç—É ${route}:`, error);
        throw error;
      }
    }
  });

  test('–ö—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –ø–æ–≤–∏–Ω–Ω—ñ —ñ—Å–Ω—É–≤–∞—Ç–∏', () => {
    const criticalFiles = [
      'src/app.html',
      'src/routes/+layout.svelte',
      'src/routes/+page.svelte',
      'src/lib/stores/gameState.js',
      'src/lib/stores/animationStore',
      'src/lib/services/gameLogicService.ts',
      'src/lib/gameOrchestrator',
      'package.json',
      'vite.config.ts',
      'svelte.config.js'
    ];

    for (const file of criticalFiles) {
      try {
        const filePath = join(process.cwd(), file);
        const content = readFileSync(filePath, 'utf8');
        expect(content).toBeDefined();
        expect(content.length).toBeGreaterThan(0);
        console.log(`‚úÖ –§–∞–π–ª ${file} —ñ—Å–Ω—É—î —Ç–∞ —á–∏—Ç–∞—î—Ç—å—Å—è`);
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–∞–π–ª—É ${file}:`, error.message);
        throw error;
      }
    }
  });

  test('–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ', () => {
    try {
      const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
      expect(packageJson.dependencies).toBeDefined();
      expect(packageJson.devDependencies).toBeDefined();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
      const criticalDeps = ['svelte', 'sveltekit', 'vite'];
      for (const dep of criticalDeps) {
        expect(packageJson.dependencies[dep] || packageJson.devDependencies[dep]).toBeDefined();
      }
      
      console.log('‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:', error.message);
      throw error;
    }
  });

  test('–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Vite –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é', () => {
    try {
      const viteConfig = readFileSync('vite.config.ts', 'utf8');
      expect(viteConfig).toContain('sveltekit');
      expect(viteConfig).toContain('defineConfig');
      console.log('‚úÖ Vite –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Vite –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error.message);
      throw error;
    }
  });

  test('–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Svelte –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é', () => {
    try {
      const svelteConfig = readFileSync('svelte.config.js', 'utf8');
      expect(svelteConfig).toContain('adapter');
      console.log('‚úÖ Svelte –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Svelte –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error.message);
      throw error;
    }
  });
});

describe('Extended Diagnostics', () => {
  test('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å—ñ–≤', () => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤
    const commonPorts = [3000, 5173, 5174, 8080];
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤:', commonPorts.join(', '));
  });

  test('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏', () => {
    const { readdirSync, statSync } = require('fs');
    const { join } = require('path');
    
    try {
      const srcDir = readdirSync('src');
      console.log('üìÅ –í–º—ñ—Å—Ç src/:', srcDir);
      
      const libDir = readdirSync('src/lib');
      console.log('üìÅ –í–º—ñ—Å—Ç src/lib/:', libDir);
      
      const routesDir = readdirSync('src/routes');
      console.log('üìÅ –í–º—ñ—Å—Ç src/routes/:', routesDir);
      
      console.log('‚úÖ –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏:', error.message);
      throw error;
    }
  });

  test('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó', () => {
    try {
      const tsConfig = readFileSync('tsconfig.json', 'utf8');
      const config = JSON.parse(tsConfig);
      expect(config.compilerOptions).toBeDefined();
      console.log('‚úÖ TypeScript –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ TypeScript –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error.message);
      throw error;
    }
  });
}); 