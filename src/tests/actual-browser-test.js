import { describe, test, expect, beforeAll, afterAll } from 'vitest';
import { spawn } from 'child_process';
import { readFileSync, existsSync } from 'fs';

describe('Actual Browser JavaScript Test', () => {
  let devServer: any = null;
  let serverUrl = 'http://localhost:5175/Stay_on_the_board';

  beforeAll(async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ dev —Å–µ—Ä–≤–µ—Ä...');
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ dev —Å–µ—Ä–≤–µ—Ä
    devServer = spawn('npm', ['run', 'dev'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: true
    });

    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    await new Promise((resolve) => {
      devServer.stdout.on('data', (data: any) => {
        const output = data.toString();
        console.log('üìù Dev server output:', output);
        
        if (output.includes('Local:') || output.includes('localhost:')) {
          console.log('‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–≤—Å—è');
          resolve(true);
        }
      });

      devServer.stderr.on('data', (data: any) => {
        console.error('‚ùå Dev server error:', data.toString());
      });

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
      setTimeout(() => {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
        resolve(false);
      }, 10000);
    });
  });

  afterAll(async () => {
    if (devServer) {
      console.log('üõë –ó—É–ø–∏–Ω—è—î–º–æ dev —Å–µ—Ä–≤–µ—Ä...');
      devServer.kill('SIGTERM');
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  });

  test('–°–∞–π—Ç –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫', async () => {
    expect(devServer).toBeDefined();
    expect(devServer.pid).toBeDefined();
    console.log(`‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –∑ PID: ${devServer.pid}`);
  });

  test('–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏', async () => {
    try {
      const response = await fetch(serverUrl);
      expect(response.status).toBe(200);
      console.log('‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error);
      throw error;
    }
  });
}); 