import { describe, test, expect, beforeAll, afterAll } from 'vitest';
import { spawn } from 'child_process';
import { readFileSync, existsSync } from 'fs';

describe('Browser Integration Test', () => {
  let devServer: any = null;
  let serverUrl = 'http://localhost:5173';

  beforeAll(async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ dev —Å–µ—Ä–≤–µ—Ä...');
    
    devServer = spawn('npm', ['run', 'dev'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: true
    });

    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    await new Promise((resolve) => {
      devServer.stdout.on('data', (data: any) => {
        const output = data.toString();
        console.log('üìù Dev server output:', output);
        
        if (output.includes('Local:') || output.includes('localhost:')) {
          console.log('‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–≤—Å—è');
          resolve(true);
        }
      });

      devServer.stderr.on('data', (data: any) => {
        console.error('Dev server error:', data.toString());
      });

      // –¢–∞–π–º–∞—É—Ç
      setTimeout(() => {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
        resolve(false);
      }, 10000);
    });
  });

  afterAll(async () => {
    if (devServer) {
      console.log('üõë –ó—É–ø–∏–Ω—è—î–º–æ dev —Å–µ—Ä–≤–µ—Ä...');
      devServer.kill('SIGTERM');
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  });

  test('–°–∞–π—Ç –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫', async () => {
    expect(devServer).toBeDefined();
    expect(devServer.pid).toBeDefined();
    console.log(`‚úÖ Dev —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –∑ PID: ${devServer.pid}`);
  });

  test('–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏', async () => {
    try {
      const response = await fetch(serverUrl);
      expect(response.status).toBe(200);
      console.log('‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error);
      throw error;
    }
  });

  describe('JavaScript Errors Detection', () => {
    test('–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤', async () => {
      try {
        const response = await fetch(serverUrl);
        const html = await response.text();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤
        expect(html).toContain('<script');
        expect(html).toContain('svelte');
        
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç—ñ–≤:', error.message);
        throw error;
      }
    });

    test('–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤', () => {
      const criticalFiles = [
        'src/lib/stores/gameState.ts',
        'src/lib/stores/animationStore.js',
        'src/routes/+layout.svelte',
        'src/routes/+page.svelte',
        'src/app.html'
      ];

      criticalFiles.forEach(filePath => {
        expect(existsSync(filePath)).toBe(true);
        console.log(`‚úÖ –§–∞–π–ª —ñ—Å–Ω—É—î: ${filePath}`);
      });
    });
  });

  describe('Runtime Error Analysis', () => {
    test('–∞–Ω–∞–ª—ñ–∑ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω –ø–æ–º–∏–ª–∫–∏ "Cannot access gameState before initialization"', () => {
      const animationStoreContent = readFileSync('src/lib/stores/animationStore.js', 'utf8');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ
      const animationStoreLines = animationStoreContent.split('\n');
      const deferredImportLine = animationStoreLines.findIndex(line => line.includes("let gameState = null"));
      expect(deferredImportLine).toBeGreaterThan(-1);
      expect(deferredImportLine).toBeLessThan(35); // –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å require —Ç–∞ import
      const hasRequire = animationStoreContent.includes("require('./gameState.js')");
      const hasImport = animationStoreContent.includes("import('./gameState.js')");
      expect(hasRequire || hasImport).toBe(true);
      
      console.log('‚úÖ –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç gameState –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
    });

    test('–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ fallback –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤', () => {
      const animationStoreContent = readFileSync('src/lib/stores/animationStore.js', 'utf8');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å fallback –∑–Ω–∞—á–µ–Ω—å
      expect(animationStoreContent).toContain('|| 0');
      expect(animationStoreContent).toContain('Date.now()');
      expect(animationStoreContent).toContain('?.');
      
      console.log('‚úÖ Fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
    });
  });

  describe('Development Environment', () => {
    test('–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π', () => {
      const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
      
      const requiredDeps = [
        '@sveltejs/kit',
        'svelte',
        'vite'
      ];

      requiredDeps.forEach(dep => {
        expect(packageJson.dependencies[dep] || packageJson.devDependencies[dep]).toBeDefined();
        console.log(`‚úÖ –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –ø—Ä–∏—Å—É—Ç–Ω—è: ${dep}`);
      });
    });

    test('–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤', () => {
      const configFiles = [
        'svelte.config.js',
        'vite.config.ts',
        'tsconfig.json'
      ];

      configFiles.forEach(filePath => {
        expect(existsSync(filePath)).toBe(true);
        console.log(`‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª —ñ—Å–Ω—É—î: ${filePath}`);
      });
    });
  });
}); 