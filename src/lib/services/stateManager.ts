/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –≥—Ä–∏.
 * –Ñ–¥–∏–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—ñ—Ö –º—É—Ç–∞—Ü—ñ–π —Å—Ç–∞–Ω—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
 */

import { get } from 'svelte/store';
import { playerInputStore } from '../stores/playerInputStore.js';
import { animationStore } from '../stores/animationStore.js';
import { logService } from './logService.js';

// –í—ñ–¥–∫–ª–∞–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç gameState
let gameState: any = null;

export interface StateChange {
  action: string;
  changes: Record<string, any>;
  timestamp: Date;
  reason?: string;
}

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

export interface GameStateChanges {
  playerRow?: number;
  playerCol?: number;
  board?: number[][];
  scores?: number[];
  gameStatus?: string;
  gameId?: number;
  [key: string]: any;
}

export class StateManager {
  private changeHistory: StateChange[] = [];
  private maxHistorySize: number = 100;
  private isProcessing: boolean = false;

  constructor() {
    this.changeHistory = [];
    this.maxHistorySize = 100;
    this.isProcessing = false;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î gameState –∑ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–º —ñ–º–ø–æ—Ä—Ç–æ–º
   */
  async getGameState(): Promise<any> {
    if (!gameState) {
      try {
        const module = await import('../stores/gameState.js');
        gameState = module.gameState;
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É gameState:', error);
        throw error;
      }
    }
    return gameState;
  }

  /**
   * –í–∞–ª—ñ–¥—É—î –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–¥ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º
   */
  async validateChanges(action: string, changes: GameStateChanges): Promise<ValidationResult> {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!action || typeof action !== 'string') {
      errors.push('Action must be a non-empty string');
    }

    if (!changes || typeof changes !== 'object') {
      errors.push('Changes must be an object');
    }

    // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –¥—ñ–π
    switch (action) {
      case 'MOVE_PLAYER':
      case 'PERFORM_MOVE':
        await this.validatePlayerMove(changes, errors, warnings);
        break;
      case 'UPDATE_SCORE':
        await this.validateScoreUpdate(changes, errors, warnings);
        break;
      case 'END_GAME':
        await this.validateGameEnd(changes, errors, warnings);
        break;
      case 'RESET_GAME':
        await this.validateGameReset(changes, errors, warnings);
        break;
      case 'SET_COMPUTER_TURN':
      case 'SET_PLAYER_TURN':
      case 'SET_COMPUTER_MOVE_PROGRESS':
      case 'UPDATE_AVAILABLE_MOVES':
      case 'NO_MOVES_CLAIM':
      case 'CONTINUE_GAME':
      case 'FINALIZE_GAME':
      case 'FIRST_MOVE_COMPLETED':
      case 'ADVANCE_TURN':
        // –¶—ñ –¥—ñ—ó –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        break;
      default:
        warnings.push(`Unknown action: ${action}`);
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  /**
   * –í–∞–ª—ñ–¥—É—î –∑–º—ñ–Ω–∏ –ø–æ–∑–∏—Ü—ñ—ó –≥—Ä–∞–≤—Ü—è
   */
  async validatePlayerMove(changes: GameStateChanges, errors: string[], warnings: string[]): Promise<void> {
    const currentState = await this.getCurrentState();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è playerRow
    if (changes.playerRow !== undefined) {
      console.log('validatePlayerMove: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ playerRow:', changes.playerRow);
      if (typeof changes.playerRow !== 'number' || changes.playerRow < 0) {
        errors.push('playerRow must be a non-negative number');
      } else if (changes.playerRow >= currentState.boardSize) {
        errors.push('playerRow must be within board bounds');
      }
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è playerCol
    if (changes.playerCol !== undefined) {
      console.log('validatePlayerMove: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ playerCol:', changes.playerCol);
      if (typeof changes.playerCol !== 'number' || changes.playerCol < 0) {
        errors.push('playerCol must be a non-negative number');
      } else if (changes.playerCol >= currentState.boardSize) {
        errors.push('playerCol must be within board bounds');
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å –≥—Ä–∞–≤–µ—Ü—å –∑–∞ –º–µ–∂—ñ –¥–æ—à–∫–∏
    if (changes.playerRow !== undefined && changes.playerCol !== undefined) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–æ—à–∫—É –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ä—É—Ö—É
      const board = currentState.board;
      console.log('validatePlayerMove: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –Ω–∞ –¥–æ—à—Ü—ñ:', {
        row: changes.playerRow,
        col: changes.playerCol,
        boardValue: board[changes.playerRow] ? board[changes.playerRow][changes.playerCol] : 'undefined'
      });
      // –ì—Ä–∞–≤–µ—Ü—å –º–æ–∂–µ —Ä—É—Ö–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ (–∑–Ω–∞—á–µ–Ω–Ω—è 0)
      // –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –±—ñ–ª—å—à–µ 0
      if (board[changes.playerRow] && board[changes.playerRow][changes.playerCol] !== 0) {
        errors.push('Player cannot move to a blocked cell');
      }
    }
  }

  /**
   * –í–∞–ª—ñ–¥—É—î –∑–º—ñ–Ω–∏ —Ä–∞—Ö—É–Ω–∫—É
   */
  async validateScoreUpdate(changes: GameStateChanges, errors: string[], warnings: string[]): Promise<void> {
    const currentState = await this.getCurrentState();

    if (changes.scores !== undefined) {
      if (!Array.isArray(changes.scores)) {
        errors.push('scores must be an array');
      } else if (changes.scores.length !== currentState.players.length) {
        errors.push('scores array length must match players count');
      } else {
        for (let i = 0; i < changes.scores.length; i++) {
          if (typeof changes.scores[i] !== 'number') {
            errors.push(`score[${i}] must be a number`);
          }
        }
      }
    }
  }

  /**
   * –í–∞–ª—ñ–¥—É—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
   */
  async validateGameEnd(changes: GameStateChanges, errors: string[], warnings: string[]): Promise<void> {
    if (changes.gameStatus !== undefined && !['playing', 'ended', 'paused'].includes(changes.gameStatus)) {
      errors.push('gameStatus must be one of: playing, ended, paused');
    }
  }

  /**
   * –í–∞–ª—ñ–¥—É—î —Å–∫–∏–¥–∞–Ω–Ω—è –≥—Ä–∏
   */
  async validateGameReset(changes: GameStateChanges, errors: string[], warnings: string[]): Promise<void> {
    // –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –≥—Ä–∏
    if (changes.gameId !== undefined && typeof changes.gameId !== 'number') {
      errors.push('gameId must be a number');
    }
  }

  /**
   * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –¥–æ —Å—Ç–∞–Ω—É
   * @param action - –ù–∞–∑–≤–∞ –¥—ñ—ó
   * @param changes - –ó–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
   * @param reason - –ü—Ä–∏—á–∏–Ω–∞ –∑–º—ñ–Ω–∏
   * @returns Promise<boolean> - –ß–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–º—ñ–Ω–∏
   */
  async applyChanges(action: string, changes: GameStateChanges, reason: string = ''): Promise<boolean> {
    console.log('üéÆ StateManager.applyChanges: –ø–æ—á–∞—Ç–æ–∫ –∑:', { action, changes, reason });

    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–º—ñ–Ω
      const validation = await this.validateChanges(action, changes);
      if (!validation.isValid) {
        console.error('‚ùå StateManager.applyChanges: –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞:', validation.errors);
        return false;
      }

      if (validation.warnings.length > 0) {
        console.warn('‚ö†Ô∏è StateManager.applyChanges: –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:', validation.warnings);
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
      const currentState = await this.getCurrentState();
      const oldState = { ...currentState };

      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏ –¥–æ gameState
      const gameStateInstance = await this.getGameState();
      gameStateInstance.update((currentState: any) => ({
        ...currentState,
        ...changes
      }));

      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏ –¥–æ playerInputStore
      this.applyPlayerInputChanges(changes, reason);

      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏ –¥–æ animationStore
      this.applyAnimationChanges(changes, reason);

      // –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
      this.addToHistory({
        action,
        changes,
        timestamp: new Date(),
        reason
      });

      // –õ–æ–≥—É—î–º–æ –∑–º—ñ–Ω–∏
      logService.state('State change applied', {
        action,
        oldState: { playerRow: oldState.playerRow, playerCol: oldState.playerCol },
        changes: { playerRow: changes.playerRow, playerCol: changes.playerCol },
        reason
      });

      console.log('‚úÖ StateManager.applyChanges: —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      return true;

    } catch (error) {
      console.error('‚ùå StateManager.applyChanges: –ø–æ–º–∏–ª–∫–∞:', error);
      return false;
    }
  }

  /**
   * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –¥–æ playerInputStore
   */
  applyPlayerInputChanges(changes: GameStateChanges, reason: string = ''): void {
    // –õ–æ–≥—ñ–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –¥–æ playerInputStore
    console.log('üéÆ StateManager.applyPlayerInputChanges:', { changes, reason });
  }

  /**
   * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –¥–æ animationStore
   */
  applyAnimationChanges(changes: GameStateChanges, reason: string = ''): void {
    // –õ–æ–≥—ñ–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –¥–æ animationStore
    console.log('üéÆ StateManager.applyAnimationChanges:', { changes, reason });
  }

  /**
   * –î–æ–¥–∞—î –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–º—ñ–Ω
   */
  addToHistory(changeRecord: StateChange): void {
    this.changeHistory.push(changeRecord);
    
    // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —ñ—Å—Ç–æ—Ä—ñ—ó
    if (this.changeHistory.length > this.maxHistorySize) {
      this.changeHistory = this.changeHistory.slice(-this.maxHistorySize);
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω
   */
  getHistory(): StateChange[] {
    return [...this.changeHistory];
  }

  /**
   * –û—á–∏—â–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω
   */
  clearHistory(): void {
    this.changeHistory = [];
  }

  /**
   * –í—ñ–¥–º—ñ–Ω—è—î –æ—Å—Ç–∞–Ω–Ω—é –∑–º—ñ–Ω—É
   * @returns Promise<boolean> - –ß–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ
   */
  async undoLastChange(): Promise<boolean> {
    if (this.changeHistory.length === 0) {
      console.warn('‚ö†Ô∏è StateManager.undoLastChange: —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
      return false;
    }

    try {
      const lastChange = this.changeHistory.pop();
      if (!lastChange) return false;

      console.log('üîÑ StateManager.undoLastChange: –≤—ñ–¥–º—ñ–Ω—è—î–º–æ –∑–º—ñ–Ω—É:', lastChange);

      // –í—ñ–¥–º—ñ–Ω—è—î–º–æ –∑–º—ñ–Ω–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞)
      const gameStateInstance = await this.getGameState();
      gameStateInstance.update((currentState: any) => {
        const revertedState = { ...currentState };
        
        // –í—ñ–¥–º—ñ–Ω—è—î–º–æ –∑–º—ñ–Ω–∏ (—Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∞ –ª–æ–≥—ñ–∫–∞)
        // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
        console.log('üîÑ StateManager.undoLastChange: –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω');
        
        return revertedState;
      });

      return true;
    } catch (error) {
      console.error('‚ùå StateManager.undoLastChange: –ø–æ–º–∏–ª–∫–∞:', error);
      return false;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
   * @returns Promise<Object> - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
   */
  async getCurrentState(): Promise<any> {
    const gameStateInstance = await this.getGameState();
    return get(gameStateInstance);
  }

  /**
   * –í–∞–ª—ñ–¥—É—î —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å —Å—Ç–∞–Ω—É
   * @returns Promise<ValidationResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
   */
  async validateStateIntegrity(): Promise<ValidationResult> {
    const errors: string[] = [];
    const warnings: string[] = [];

    try {
      const currentState = await this.getCurrentState();

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
      if (!currentState.board || !Array.isArray(currentState.board)) {
        errors.push('Board is missing or invalid');
      }

      if (typeof currentState.boardSize !== 'number' || currentState.boardSize <= 0) {
        errors.push('Board size is invalid');
      }

      if (!currentState.players || !Array.isArray(currentState.players)) {
        errors.push('Players array is missing or invalid');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≥—Ä–∞–≤—Ü—ñ–≤
      currentState.players.forEach((player: any, index: number) => {
        if (typeof player.row !== 'number' || typeof player.col !== 'number') {
          errors.push(`Player ${index} has invalid position`);
        }
      });

    } catch (error) {
      errors.push(`Failed to validate state: ${error}`);
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
export const stateManager = new StateManager(); 