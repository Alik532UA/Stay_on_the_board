/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –≥—Ä–∏.
 * –Ñ–¥–∏–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—ñ—Ö –º—É—Ç–∞—Ü—ñ–π —Å—Ç–∞–Ω—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
 */

import { get } from 'svelte/store';
import { playerInputStore } from '../stores/playerInputStore.js';
import { animationStore } from '../stores/animationStore.js';
import { logService } from './logService.js';
import { gameState } from '../stores/gameState.js';
import { validatePlayerMove } from './gameLogicService.js';
import { validateScoreUpdate } from './scoreService.js';

export interface StateChange {
  action: string;
  changes: Record<string, any>;
  timestamp: Date;
  reason?: string;
}

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

export interface GameStateChanges {
  playerRow?: number;
  playerCol?: number;
  board?: number[][];
  scores?: number[];
  gameStatus?: string;
  gameId?: number;
  [key: string]: any;
}

export class StateManager {
  private changeHistory: StateChange[] = [];
  private maxHistorySize: number = 100;
  private isProcessing: boolean = false;

  constructor() {
    this.changeHistory = [];
    this.maxHistorySize = 100;
    this.isProcessing = false;
  }

  /**
   * –í–∞–ª—ñ–¥—É—î –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–¥ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º
   */
  async validateChanges(action: string, changes: GameStateChanges): Promise<ValidationResult> {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!action || typeof action !== 'string') {
      errors.push('Action must be a non-empty string');
    }

    if (!changes || typeof changes !== 'object') {
      errors.push('Changes must be an object');
    }

    // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –¥—ñ–π
    switch (action) {
      case 'MOVE_PLAYER':
      case 'PERFORM_MOVE':
        const { errors: moveErrors, warnings: moveWarnings } = validatePlayerMove(changes, get(gameState));
        errors.push(...moveErrors);
        warnings.push(...moveWarnings);
        break;
      case 'UPDATE_SCORE':
        const { errors: scoreErrors, warnings: scoreWarnings } = validateScoreUpdate(changes, get(gameState));
        errors.push(...scoreErrors);
        warnings.push(...scoreWarnings);
        break;
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  /**
   * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –¥–æ —Å—Ç–∞–Ω—É
   * @param action - –ù–∞–∑–≤–∞ –¥—ñ—ó
   * @param changes - –ó–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
   * @param reason - –ü—Ä–∏—á–∏–Ω–∞ –∑–º—ñ–Ω–∏
   * @returns Promise<boolean> - –ß–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–º—ñ–Ω–∏
   */
  async applyChanges(action: string, changes: GameStateChanges, reason: string = ''): Promise<boolean> {
    try {
      const validation = await this.validateChanges(action, changes);
      if (!validation.isValid) {
        logService.state('StateManager validation failed', { action, reason, errors: validation.errors });
        return false;
      }
      if (validation.warnings.length > 0) {
        logService.state('StateManager validation warnings', { action, reason, warnings: validation.warnings });
      }

      gameState.update((currentState: any) => ({
        ...currentState,
        ...changes
      }));

      this.addToHistory({ action, changes, timestamp: new Date(), reason });

      logService.state(`Applied change: ${action}`, { reason, changes });

      return true;
    } catch (error) {
      logService.state('StateManager applyChanges failed', { action, reason, error });
      return false;
    }
  }

  /**
   * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –¥–æ playerInputStore
   */
  applyPlayerInputChanges(changes: GameStateChanges, reason: string = ''): void {}

  /**
   * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –¥–æ animationStore
   */
  applyAnimationChanges(changes: GameStateChanges, reason: string = ''): void {}

  /**
   * –î–æ–¥–∞—î –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–º—ñ–Ω
   */
  addToHistory(changeRecord: StateChange): void {
    this.changeHistory.push(changeRecord);
    
    // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —ñ—Å—Ç–æ—Ä—ñ—ó
    if (this.changeHistory.length > this.maxHistorySize) {
      this.changeHistory = this.changeHistory.slice(-this.maxHistorySize);
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω
   */
  getHistory(): StateChange[] {
    return [...this.changeHistory];
  }

  /**
   * –û—á–∏—â–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω
   */
  clearHistory(): void {
    this.changeHistory = [];
  }

  /**
   * –í—ñ–¥–º—ñ–Ω—è—î –æ—Å—Ç–∞–Ω–Ω—é –∑–º—ñ–Ω—É
   * @returns Promise<boolean> - –ß–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ
   */
  async undoLastChange(): Promise<boolean> {
    if (this.changeHistory.length === 0) {
      console.warn('‚ö†Ô∏è StateManager.undoLastChange: —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
      return false;
    }

    try {
      const lastChange = this.changeHistory.pop();
      if (!lastChange) return false;

      console.log('üîÑ StateManager.undoLastChange: –≤—ñ–¥–º—ñ–Ω—è—î–º–æ –∑–º—ñ–Ω—É:', lastChange);

      // –í—ñ–¥–º—ñ–Ω—è—î–º–æ –∑–º—ñ–Ω–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞)
      gameState.update((currentState: any) => {
        const revertedState = { ...currentState };
        
        // –í—ñ–¥–º—ñ–Ω—è—î–º–æ –∑–º—ñ–Ω–∏ (—Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∞ –ª–æ–≥—ñ–∫–∞)
        // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
        console.log('üîÑ StateManager.undoLastChange: –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω');
        
        return revertedState;
      });

      return true;
    } catch (error) {
      console.error('‚ùå StateManager.undoLastChange: –ø–æ–º–∏–ª–∫–∞:', error);
      return false;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
   * @returns Promise<Object> - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
   */
  getCurrentState(): any {
    return get(gameState);
  }

  /**
   * –í–∞–ª—ñ–¥—É—î —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å —Å—Ç–∞–Ω—É
   * @returns Promise<ValidationResult> - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
   */
  async validateStateIntegrity(): Promise<ValidationResult> {
    const errors: string[] = [];
    const warnings: string[] = [];

    try {
      const currentState = this.getCurrentState();

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
      if (!currentState.board || !Array.isArray(currentState.board)) {
        errors.push('Board is missing or invalid');
      }

      if (typeof currentState.boardSize !== 'number' || currentState.boardSize <= 0) {
        errors.push('Board size is invalid');
      }

      if (!currentState.players || !Array.isArray(currentState.players)) {
        errors.push('Players array is missing or invalid');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≥—Ä–∞–≤—Ü—ñ–≤
      currentState.players.forEach((player: any, index: number) => {
        if (typeof player.row !== 'number' || typeof player.col !== 'number') {
          errors.push(`Player ${index} has invalid position`);
        }
      });

    } catch (error) {
      errors.push(`Failed to validate state: ${error}`);
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
export const stateManager = new StateManager();