/**
 * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ª–æ–≥—É–≤–∞–Ω–Ω—è
 * @class LoggingOptimizer
 */
class LoggingOptimizer {
    static presets = {
        // –†–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        performance: {
            level: 'ERROR',
            quickDisable: true,
            enableConsoleOutput: false,
            enableStorageOutput: false,
            maxLogs: 100
        },
        
        // –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏
        development: {
            level: 'DEBUG',
            quickDisable: false,
            enableConsoleOutput: true,
            enableStorageOutput: true,
            maxLogs: 1000
        },
        
        // –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        testing: {
            level: 'INFO',
            quickDisable: false,
            enableConsoleOutput: true,
            enableStorageOutput: false,
            maxLogs: 500
        },
        
        // –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
        production: {
            level: 'WARN',
            quickDisable: false,
            enableConsoleOutput: false,
            enableStorageOutput: true,
            maxLogs: 200
        }
    };
    
    /**
     * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –ø—Ä–µ—Å–µ—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
     * @param {string} presetName - –ù–∞–∑–≤–∞ –ø—Ä–µ—Å–µ—Ç—É
     */
    static applyPreset(presetName) {
        if (!this.presets[presetName]) {
            console.error(`–ü—Ä–µ—Å–µ—Ç "${presetName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ñ:`, Object.keys(this.presets));
            return;
        }
        
        const preset = this.presets[presetName];
        Logger.configure(preset);
        
        console.log(`‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ø—Ä–µ—Å–µ—Ç "${presetName}"`);
        this.showCurrentStatus();
    }
    
    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ª–æ–≥—É–≤–∞–Ω–Ω—è
     */
    static showCurrentStatus() {
        const config = Logger.config;
        const stats = Logger.getStats();
        
        console.log('üìä –°—Ç–∞–Ω –ª–æ–≥—É–≤–∞–Ω–Ω—è:');
        console.log(`   –†—ñ–≤–µ–Ω—å: ${config.level}`);
        console.log(`   –®–≤–∏–¥–∫–µ –≤–∏–º–∫–Ω–µ–Ω–Ω—è: ${config.quickDisable ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –ö–æ–Ω—Å–æ–ª—å: ${config.enableConsoleOutput ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${config.enableStorageOutput ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤: ${stats.total}`);
        console.log(`   –õ–æ–≥–∏ –ø–æ —Ä—ñ–≤–Ω—è—Ö:`, stats.byLevel);
    }
    
    /**
     * –®–≤–∏–¥–∫–æ –≤–∏–º–∏–∫–∞—î –ª–æ–≥—É–≤–∞–Ω–Ω—è
     */
    static disable() {
        Logger.config.quickDisable = true;
        console.log('üö´ –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ');
    }
    
    /**
     * –®–≤–∏–¥–∫–æ –≤–º–∏–∫–∞—î –ª–æ–≥—É–≤–∞–Ω–Ω—è
     */
    static enable() {
        Logger.config.quickDisable = false;
        console.log('‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ');
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
     * @param {string} level - –†—ñ–≤–µ–Ω—å (ERROR, WARN, INFO, DEBUG)
     */
    static setLevel(level) {
        Logger.config.level = level;
        console.log(`üìù –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${level}`);
    }
    
    /**
     * –û—á–∏—â—É—î –≤—Å—ñ –ª–æ–≥–∏
     */
    static clear() {
        Logger.clear();
        console.log('üóëÔ∏è –í—Å—ñ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ');
    }
    
    /**
     * –ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥—ñ–≤
     */
    static stats() {
        const stats = Logger.getStats();
        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥—ñ–≤:', stats);
    }
    
    /**
     * –¢–µ—Å—Ç—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
     */
    static performanceTest() {
        console.log('üèÉ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...');
        
        const iterations = 1000;
        const results = {};
        
        // –¢–µ—Å—Ç –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        this.disable();
        const startTime1 = performance.now();
        for (let i = 0; i < iterations; i++) {
            // –°–∏–º—É–ª—è—Ü—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π
            Math.random() * 100;
        }
        results.withoutLogging = performance.now() - startTime1;
        
        // –¢–µ—Å—Ç –∑ ERROR –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
        this.enable();
        this.setLevel('ERROR');
        const startTime2 = performance.now();
        for (let i = 0; i < iterations; i++) {
            Logger.error('Test error', { i });
            Math.random() * 100;
        }
        results.withError = performance.now() - startTime2;
        
        // –¢–µ—Å—Ç –∑ INFO –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
        this.setLevel('INFO');
        const startTime3 = performance.now();
        for (let i = 0; i < iterations; i++) {
            Logger.info('Test info', { i });
            Math.random() * 100;
        }
        results.withInfo = performance.now() - startTime3;
        
        // –¢–µ—Å—Ç –∑ DEBUG –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
        this.setLevel('DEBUG');
        const startTime4 = performance.now();
        for (let i = 0; i < iterations; i++) {
            Logger.debug('Test debug', { i });
            Math.random() * 100;
        }
        results.withDebug = performance.now() - startTime4;
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:');
        console.log(`   –ë–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è: ${results.withoutLogging.toFixed(2)}ms`);
        console.log(`   –ó ERROR: ${results.withError.toFixed(2)}ms (+${((results.withError - results.withoutLogging) / results.withoutLogging * 100).toFixed(1)}%)`);
        console.log(`   –ó INFO: ${results.withInfo.toFixed(2)}ms (+${((results.withInfo - results.withoutLogging) / results.withoutLogging * 100).toFixed(1)}%)`);
        console.log(`   –ó DEBUG: ${results.withDebug.toFixed(2)}ms (+${((results.withDebug - results.withoutLogging) / results.withoutLogging * 100).toFixed(1)}%)`);
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
     */
    static autoOptimize() {
        const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        const isProduction = window.location.protocol === 'https:' && !isLocalhost;
        
        if (isProduction) {
            this.applyPreset('production');
        } else if (isLocalhost) {
            this.applyPreset('development');
        } else {
            this.applyPreset('testing');
        }
    }
}

// –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
window.LoggingOptimizer = LoggingOptimizer;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
if (typeof Logger !== 'undefined') {
    LoggingOptimizer.autoOptimize();
    
    // –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('üîß LoggingOptimizer –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
    console.log('   LoggingOptimizer.disable() - –≤–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è');
    console.log('   LoggingOptimizer.enable() - —É–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è');
    console.log('   LoggingOptimizer.setLevel("ERROR") - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å');
    console.log('   LoggingOptimizer.applyPreset("performance") - –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø—Ä–µ—Å–µ—Ç');
    console.log('   LoggingOptimizer.performanceTest() - —Ç–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
    console.log('   LoggingOptimizer.stats() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
} 