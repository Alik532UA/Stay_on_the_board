/**
 * –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç-—Ä–∞–Ω–µ—Ä –¥–ª—è unit —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 * @class TestRunner
 */
class TestRunner {
    constructor() {
        this.tests = new Map();
        this.beforeEach = null;
        this.afterEach = null;
        this.beforeAll = null;
        this.afterAll = null;
        this.results = [];
        this.isRunning = false;
    }
    
    /**
     * –†–µ—î—Å—Ç—Ä—É—î —Ç–µ—Å—Ç
     * @param {string} name - –ù–∞–∑–≤–∞ —Ç–µ—Å—Ç—É
     * @param {Function} testFn - –§—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É
     * @param {Object} options - –û–ø—Ü—ñ—ó —Ç–µ—Å—Ç—É
     */
    test(name, testFn, options = {}) {
        this.tests.set(name, { testFn, options });
    }
    
    /**
     * –†–µ—î—Å—Ç—Ä—É—î —Ç–µ—Å—Ç, —è–∫–∏–π –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–∏–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É
     * @param {string} name - –ù–∞–∑–≤–∞ —Ç–µ—Å—Ç—É
     * @param {Function} testFn - –§—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É
     * @param {string|Function} expectedError - –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞
     */
    testThrows(name, testFn, expectedError) {
        this.test(name, async () => {
            try {
                await testFn();
                throw new Error('Expected function to throw an error');
            } catch (error) {
                if (typeof expectedError === 'string') {
                    if (!error.message.includes(expectedError)) {
                        throw new Error(`Expected error to contain "${expectedError}", but got "${error.message}"`);
                    }
                } else if (typeof expectedError === 'function') {
                    if (!(error instanceof expectedError)) {
                        throw new Error(`Expected error to be instance of ${expectedError.name}, but got ${error.constructor.name}`);
                    }
                }
            }
        });
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º
     * @param {Function} fn - –§—É–Ω–∫—Ü—ñ—è
     */
    beforeEach(fn) {
        this.beforeEach = fn;
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
     * @param {Function} fn - –§—É–Ω–∫—Ü—ñ—è
     */
    afterEach(fn) {
        this.afterEach = fn;
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–¥ –≤—Å—ñ–º–∞ —Ç–µ—Å—Ç–∞–º–∏
     * @param {Function} fn - –§—É–Ω–∫—Ü—ñ—è
     */
    beforeAll(fn) {
        this.beforeAll = fn;
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
     * @param {Function} fn - –§—É–Ω–∫—Ü—ñ—è
     */
    afterAll(fn) {
        this.afterAll = fn;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏
     * @param {Object} options - –û–ø—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
     */
    async run(options = {}) {
        if (this.isRunning) {
            throw new Error('TestRunner is already running');
        }
        
        this.isRunning = true;
        this.results = [];
        
        const startTime = Date.now();
        
        try {
            // –í–∏–∫–æ–Ω—É—î–º–æ beforeAll
            if (this.beforeAll) {
                await this.beforeAll();
            }
            
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
            for (const [name, { testFn, options: testOptions }] of this.tests) {
                await this.runTest(name, testFn, testOptions);
            }
            
            // –í–∏–∫–æ–Ω—É—î–º–æ afterAll
            if (this.afterAll) {
                await this.afterAll();
            }
        } finally {
            this.isRunning = false;
        }
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        const summary = this.generateSummary(duration);
        
        // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        this.outputResults(summary);
        
        return summary;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞—î –æ–¥–∏–Ω —Ç–µ—Å—Ç
     * @param {string} name - –ù–∞–∑–≤–∞ —Ç–µ—Å—Ç—É
     * @param {Function} testFn - –§—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É
     * @param {Object} options - –û–ø—Ü—ñ—ó —Ç–µ—Å—Ç—É
     */
    async runTest(name, testFn, options = {}) {
        const testStartTime = Date.now();
        const result = {
            name,
            status: 'pending',
            duration: 0,
            error: null,
            startTime: testStartTime
        };
        
        try {
            // –í–∏–∫–æ–Ω—É—î–º–æ beforeEach
            if (this.beforeEach) {
                await this.beforeEach();
            }
            
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
            const testResult = testFn();
            
            // –û–±—Ä–æ–±–ª—è—î–º–æ Promise —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (testResult && typeof testResult.then === 'function') {
                await testResult;
            }
            
            result.status = 'passed';
            
        } catch (error) {
            result.status = 'failed';
            result.error = {
                message: error.message,
                stack: error.stack,
                name: error.name
            };
        } finally {
            // –í–∏–∫–æ–Ω—É—î–º–æ afterEach
            if (this.afterEach) {
                try {
                    await this.afterEach();
                } catch (error) {
                    Logger.error('afterEach error:', error);
                }
            }
            
            result.duration = Date.now() - testStartTime;
            this.results.push(result);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä—É—î –∑–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
     * @param {number} totalDuration - –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
     * @returns {Object} –ó–≤–µ–¥–µ–Ω–Ω—è
     */
    generateSummary(totalDuration) {
        const passed = this.results.filter(r => r.status === 'passed').length;
        const failed = this.results.filter(r => r.status === 'failed').length;
        const total = this.results.length;
        
        return {
            total,
            passed,
            failed,
            duration: totalDuration,
            successRate: total > 0 ? (passed / total) * 100 : 0,
            results: this.results
        };
    }
    
    /**
     * –í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
     * @param {Object} summary - –ó–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
     */
    outputResults(summary) {
        Logger.info('\n' + '='.repeat(50));
        Logger.info('üß™ TEST RESULTS');
        Logger.info('='.repeat(50));
        
        // –í–∏–≤–æ–¥–∏–º–æ –∫–æ–∂–µ–Ω —Ç–µ—Å—Ç
        for (const result of summary.results) {
            const status = result.status === 'passed' ? '‚úÖ' : '‚ùå';
            const duration = `${result.duration}ms`;
            
            Logger.info(`${status} ${result.name} (${duration})`);
            
            if (result.error) {
                Logger.error(`   Error: ${result.error.message}`);
                if (result.error.stack) {
                    Logger.error(`   Stack: ${result.error.stack}`);
                }
            }
        }
        
        // –í–∏–≤–æ–¥–∏–º–æ –∑–≤–µ–¥–µ–Ω–Ω—è
        Logger.info('\n' + '-'.repeat(50));
        Logger.info(`üìä SUMMARY:`);
        Logger.info(`   Total: ${summary.total}`);
        Logger.info(`   Passed: ${summary.passed} ‚úÖ`);
        Logger.info(`   Failed: ${summary.failed} ‚ùå`);
        Logger.info(`   Success Rate: ${summary.successRate.toFixed(1)}%`);
        Logger.info(`   Duration: ${summary.duration}ms`);
        Logger.info('='.repeat(50) + '\n');
        
        // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏, –∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫
        if (summary.failed > 0) {
            throw new Error(`${summary.failed} test(s) failed`);
        }
    }
    
    /**
     * –û—á–∏—â—É—î –≤—Å—ñ —Ç–µ—Å—Ç–∏
     */
    clear() {
        this.tests.clear();
        this.results = [];
        this.beforeEach = null;
        this.afterEach = null;
        this.beforeAll = null;
        this.afterAll = null;
    }
    
    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç—ñ–≤
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        return {
            totalTests: this.tests.size,
            totalResults: this.results.length,
            passed: this.results.filter(r => r.status === 'passed').length,
            failed: this.results.filter(r => r.status === 'failed').length
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
window.describe = function(name, fn) {
    Logger.info(`\nüìÅ ${name}`);
    fn();
};

window.it = function(name, fn) {
    if (!window.currentTestRunner) {
        window.currentTestRunner = new TestRunner();
    }
    window.currentTestRunner.test(name, fn);
};

window.expect = function(value) {
    return {
        toBe: function(expected) {
            if (value !== expected) {
                throw new Error(`Expected ${value} to be ${expected}`);
            }
        },
        toEqual: function(expected) {
            if (JSON.stringify(value) !== JSON.stringify(expected)) {
                throw new Error(`Expected ${JSON.stringify(value)} to equal ${JSON.stringify(expected)}`);
            }
        },
        toContain: function(expected) {
            if (Array.isArray(value)) {
                if (!value.includes(expected)) {
                    throw new Error(`Expected array to contain ${expected}`);
                }
            } else if (typeof value === 'string') {
                if (!value.includes(expected)) {
                    throw new Error(`Expected string to contain ${expected}`);
                }
            } else {
                throw new Error('toContain can only be used with arrays and strings');
            }
        },
        toBeDefined: function() {
            if (value === undefined) {
                throw new Error('Expected value to be defined');
            }
        },
        toBeNull: function() {
            if (value !== null) {
                throw new Error(`Expected ${value} to be null`);
            }
        },
        toBeTruthy: function() {
            if (!value) {
                throw new Error(`Expected ${value} to be truthy`);
            }
        },
        toBeFalsy: function() {
            if (value) {
                throw new Error(`Expected ${value} to be falsy`);
            }
        }
    };
};

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TestRunner;
} else {
    window.TestRunner = TestRunner;
} 