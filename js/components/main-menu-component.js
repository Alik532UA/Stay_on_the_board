// === MAIN MENU COMPONENT ===
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏

import { BaseComponent } from './base-component.js';
import { stateManager } from '../state-manager.js';
import { t } from '../localization.js';

export class MainMenuComponent extends BaseComponent {
    constructor(element) {
        super(element);
        this.eventsBound = false; // –§–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∏ –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –ø–æ–¥—ñ—ó
    }
    
    render() {
        this.element.innerHTML = `
            <div id="main-menu-container">
                <div class="main-menu-top-icons">
                    <button id="theme-style-btn" class="main-menu-icon" title="–¢–µ–º–∞">
                        <span class="main-menu-icon-inner">üé®</span>
                    </button>
                    <!-- –î—Ä–æ–ø–¥–∞—É–Ω —Ç–µ–º –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —à–∞–±–ª–æ–Ω—É, –±—É–¥–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ -->
                    <button id="lang-select-btn" class="main-menu-icon" title="–ú–æ–≤–∞">
                        <span class="main-menu-icon-inner">
                            <!-- UA Flag Rectangle –±–µ–∑ –±—ñ–ª–æ—ó –æ–±–≤–æ–¥–∫–∏ -->
                            <svg class="main-menu-icon-svg" width="32" height="24" viewBox="0 0 32 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect width="32" height="12" y="0" fill="#0057B7"/>
                                <rect width="32" height="12" y="12" fill="#FFD700"/>
                            </svg>
                        </span>
                    </button>
                    <a id="donate-btn" class="main-menu-icon" href="#" target="_blank" rel="noopener noreferrer" title="–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç">
                        <span class="main-menu-icon-inner">
                            <img src="img/coin_1fa99.png" alt="Donate" class="main-menu-icon-img" />
                        </span>
                    </a>
                </div>
                <div class="main-menu-title">
                    –ó–∞–ª–∏—à–∏—Ç–∏—Å—è –Ω–∞ –¥–æ—à—Ü—ñ
                </div>
                <div class="main-menu-subtitle">
                    –ú–µ–Ω—é
                </div>
                <div id="main-menu-buttons">
                    <button class="modal-button secondary" id="btn-vs-computer">–ì—Ä–∞—Ç–∏ –∑ –∫–æ–º–ø'—é—Ç–µ—Ä–æ–º</button>
                    <button class="modal-button secondary" id="btn-local-game">–õ–æ–∫–∞–ª—å–Ω–∞ –≥—Ä–∞</button>
                    <button class="modal-button secondary" id="btn-online">–ì—Ä–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω</button>
                    <button class="modal-button secondary" id="btn-settings">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</button>
                    <button class="modal-button secondary" id="btn-controls">–ö–µ—Ä—É–≤–∞–Ω–Ω—è</button>
                    <button class="modal-button secondary" id="btn-rules">–ü—Ä–∞–≤–∏–ª–∞</button>
                    <button class="modal-button danger" id="btn-clear-cache">–û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à</button>
                </div>
            </div>
        `;
        
        // --- –í–ò–î–ê–õ–ï–ù–û: this.eventsBound = false; ---
        setTimeout(() => {
            this.bindEvents();
        }, 0);
    }
    
    bindEvents() {
        // --- –î–û–î–ê–ù–û: –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---
        this.element.querySelectorAll('button').forEach(btn => {
            btn.replaceWith(btn.cloneNode(true));
        });
        // --- –í–ò–î–ê–õ–ï–ù–û: if (this.eventsBound) { ... return; } ---
        // --- –í–ò–î–ê–õ–ï–ù–û: this.eventsBound = true; ---
        // --- –í–ò–î–ê–õ–ï–ù–û: —Å—Ç–∞—Ä–∏–π —Ü–∏–∫–ª –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ ---
        // --- –î–∞–ª—ñ –∑–∞–ª–∏—à–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---
        this.element.querySelector('#btn-vs-computer')?.addEventListener('click', () => {
            stateManager.navigateTo('gameBoard', { gameMode: 'vsComputer' });
        });
        this.element.querySelector('#btn-local-game')?.addEventListener('click', () => {
            stateManager.navigateTo('gameBoard', { gameMode: 'local' });
        });
        this.element.querySelector('#btn-online')?.addEventListener('click', () => {
            window.location.href = 'peer-mvp.html';
        });
        this.element.querySelector('#btn-settings')?.addEventListener('click', () => {
            stateManager.navigateTo('settings');
        });
        this.element.querySelector('#btn-controls')?.addEventListener('click', () => {
            this.showControlsInfo();
        });
        this.element.querySelector('#btn-rules')?.addEventListener('click', () => {
            this.showRules();
        });
        this.element.querySelector('#btn-clear-cache')?.addEventListener('click', () => {
            localStorage.clear();
            location.reload();
        });
        // --- –î–†–û–ü–î–ê–£–ù –¢–ï–ú–ò ---
        const themeBtn = this.element.querySelector('#theme-style-btn');
        if (themeBtn) {
            themeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                let overlay = document.getElementById('dropdown-overlay');
                if (!overlay) {
                    overlay = document.createElement('div');
                    overlay.id = 'dropdown-overlay';
                    overlay.className = 'dropdown-overlay' + (document.documentElement.getAttribute('data-theme') === 'dark' ? '' : ' light');
                    document.body.appendChild(overlay);
                } else {
                    overlay.classList.remove('hidden');
                    overlay.className = 'dropdown-overlay' + (document.documentElement.getAttribute('data-theme') === 'dark' ? '' : ' light');
                }
                overlay.onclick = () => {
                    dropdown.classList.add('hidden');
                    overlay.classList.add('hidden');
                    document.removeEventListener('mousedown', closeHandler);
                    document.removeEventListener('keydown', escHandler);
                };
                let dropdown = document.getElementById('theme-style-dropdown-new');
                if (!dropdown) {
                    dropdown = document.createElement('div');
                    dropdown.id = 'theme-style-dropdown-new';
                    dropdown.className = 'theme-dropdown';
                    dropdown.innerHTML = `
                        <div class="theme-style-row" data-style="classic">
                            <button class="theme-btn" data-theme="light">‚òÄÔ∏è</button>
                            <span class="theme-name">Ubuntu</span>
                            <button class="theme-btn" data-theme="dark">üåô</button>
                        </div>
                        <div class="theme-style-row" data-style="peak">
                            <button class="theme-btn" data-theme="light">‚òÄÔ∏è</button>
                            <span class="theme-name">PEAK</span>
                            <button class="theme-btn" data-theme="dark">üåô</button>
                        </div>
                        <div class="theme-style-row" data-style="cs2">
                            <button class="theme-btn" data-theme="light">‚òÄÔ∏è</button>
                            <span class="theme-name">CS&nbsp;2</span>
                            <button class="theme-btn" data-theme="dark">üåô</button>
                        </div>
                        <div class="theme-style-row" data-style="glass">
                            <button class="theme-btn" data-theme="light">‚òÄÔ∏è</button>
                            <span class="theme-name">Glassmorphism</span>
                            <button class="theme-btn" data-theme="dark">üåô</button>
                        </div>
                        <div class="theme-style-row" data-style="material">
                            <button class="theme-btn" data-theme="light">‚òÄÔ∏è</button>
                            <span class="theme-name">Material You</span>
                            <button class="theme-btn" data-theme="dark">üåô</button>
                        </div>
                    `;
                    document.body.appendChild(dropdown);
                }
                // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
                if (window.innerWidth <= 600) {
                    dropdown.classList.add('mobile');
                    dropdown.classList.remove('desktop');
                } else {
                    dropdown.classList.add('desktop');
                    dropdown.classList.remove('mobile');
                    const rect = themeBtn.getBoundingClientRect();
                    dropdown.style.top = `${rect.bottom + window.scrollY + 8}px`;
                    dropdown.style.left = `${rect.left + window.scrollX + rect.width/2 - 160}px`;
                }
                dropdown.classList.remove('hidden');
                // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–µ–º–∏/—Å—Ç–∏–ª—é
                dropdown.querySelectorAll('.theme-style-row .theme-btn').forEach(btn => {
                    btn.onclick = (ev) => {
                        const style = btn.closest('.theme-style-row').getAttribute('data-style');
                        const theme = btn.getAttribute('data-theme');
                        document.documentElement.setAttribute('data-style', style);
                        document.documentElement.setAttribute('data-theme', theme);
                        localStorage.setItem('style', style);
                        localStorage.setItem('theme', theme);
                        dropdown.classList.add('hidden');
                        overlay.classList.add('hidden');
                    };
                });
                // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–µ–Ω—é
                const closeHandler = (ev) => {
                    if (!dropdown.contains(ev.target) && ev.target !== themeBtn) {
                        dropdown.classList.add('hidden');
                        overlay.classList.add('hidden');
                        document.removeEventListener('mousedown', closeHandler);
                        document.removeEventListener('keydown', escHandler);
                    }
                };
                // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ Esc
                const escHandler = (ev) => {
                    if (ev.key === 'Escape') {
                        dropdown.classList.add('hidden');
                        overlay.classList.add('hidden');
                        document.removeEventListener('mousedown', closeHandler);
                        document.removeEventListener('keydown', escHandler);
                    }
                };
                setTimeout(() => {
                    document.addEventListener('mousedown', closeHandler);
                    document.addEventListener('keydown', escHandler);
                }, 0);
            });
        }
        // --- –î–†–û–ü–î–ê–£–ù –ú–û–í–ò ---
        const langBtn = this.element.querySelector('#lang-select-btn');
        if (langBtn) {
            langBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                let overlay = document.getElementById('dropdown-overlay');
                if (!overlay) {
                    overlay = document.createElement('div');
                    overlay.id = 'dropdown-overlay';
                    overlay.className = 'dropdown-overlay' + (document.documentElement.getAttribute('data-theme') === 'dark' ? '' : ' light');
                    document.body.appendChild(overlay);
                } else {
                    overlay.classList.remove('hidden');
                    overlay.className = 'dropdown-overlay' + (document.documentElement.getAttribute('data-theme') === 'dark' ? '' : ' light');
                }
                overlay.onclick = () => {
                    dropdown.classList.add('hidden');
                    overlay.classList.add('hidden');
                    document.removeEventListener('mousedown', closeHandler);
                    document.removeEventListener('keydown', escHandler);
                };
                let dropdown = document.getElementById('lang-dropdown-new');
                if (!dropdown) {
                    dropdown = document.createElement('div');
                    dropdown.id = 'lang-dropdown-new';
                    dropdown.className = 'lang-dropdown';
                    dropdown.innerHTML = `
                        <button class="lang-option" data-lang="uk" title="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"><span>üá∫üá¶</span></button>
                        <button class="lang-option" data-lang="en" title="English"><span>üá¨üáß</span></button>
                        <button class="lang-option" data-lang="crh" title="Qƒ±rƒ±mtatarca"><span>üè¥</span></button>
                        <button class="lang-option" data-lang="nl" title="Nederlands"><span>üá≥üá±</span></button>
                    `;
                    document.body.appendChild(dropdown);
                }
                // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
                const rect = langBtn.getBoundingClientRect();
                dropdown.style.top = `${rect.bottom + window.scrollY + 8}px`;
                dropdown.style.left = `${rect.left + window.scrollX + rect.width/2 - 90}px`;
                dropdown.classList.remove('hidden');
                // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
                dropdown.querySelectorAll('.lang-option').forEach(btn => {
                    btn.onclick = (ev) => {
                        const lang = btn.getAttribute('data-lang');
                        localStorage.setItem('lang', lang);
                        location.reload();
                    };
                });
                // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–µ–Ω—é
                const closeHandler = (ev) => {
                    if (!dropdown.contains(ev.target) && ev.target !== langBtn) {
                        dropdown.classList.add('hidden');
                        overlay.classList.add('hidden');
                        document.removeEventListener('mousedown', closeHandler);
                        document.removeEventListener('keydown', escHandler);
                    }
                };
                // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ Esc
                const escHandler = (ev) => {
                    if (ev.key === 'Escape') {
                        dropdown.classList.add('hidden');
                        overlay.classList.add('hidden');
                        document.removeEventListener('mousedown', closeHandler);
                        document.removeEventListener('keydown', escHandler);
                    }
                };
                setTimeout(() => {
                    document.addEventListener('mousedown', closeHandler);
                    document.addEventListener('keydown', escHandler);
                }, 0);
            });
        }
        // --- DONATE ---
        const donateBtn = this.element.querySelector('#donate-btn');
        if (donateBtn) {
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            donateBtn.href = isMobile
                ? 'https://send.monobank.ua/jar/8TPmFKQTCK'
                : 'https://send.monobank.ua/jar/8TPmFKQTCK/';
        }
    }
    
    destroy() {
        Logger.debug('[MainMenuComponent] destroy called');
        this.eventsBound = false; // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥
        this.element.innerHTML = '';
    }
    
    subscribeToState() {
        Logger.debug('[MainMenuComponent] subscribeToState called');
        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        this.subscribe('settings.language', () => {
            Logger.debug('[MainMenuComponent] Language changed, re-rendering');
            this.render();
        });
    }
    
    showBoardSizeSelection(onSizeSelect) {
        const sizes = [3, 4, 5, 6, 7, 8];
        const sizeButtons = sizes.map(size => 
            `<button class="modal-button secondary" data-size="${size}">${size}x${size}</button>`
        ).join('');
        
        const content = `
            <div style="text-align: center;">
                <p>${t('game.selectBoardSize')}</p>
                <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap; margin: 20px 0;">
                    ${sizeButtons}
                </div>
            </div>
        `;
        
        stateManager.showModal(
            t('game.boardSize'),
            content,
            [{ text: t('common.cancel'), class: 'secondary' }]
        );
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–æ–∑–º—ñ—Ä—É
        setTimeout(() => {
            document.querySelectorAll('[data-size]').forEach(btn => {
                btn.addEventListener('click', () => {
                    const size = parseInt(btn.dataset.size);
                    stateManager.hideModal();
                    onSizeSelect(size);
                });
            });
        }, 100);
    }
    
    showPlayerNameInput(onNamesEntered) {
        const content = `
            <div style="text-align: center;">
                <p>${t('game.enterPlayerNames')}</p>
                <div style="margin: 20px 0;">
                    <input type="text" id="player1-name" placeholder="${t('game.player1Name')}" 
                           style="width: 100%; margin-bottom: 10px; padding: 8px; border: 1px solid var(--border-color); border-radius: 4px;">
                    <input type="text" id="player2-name" placeholder="${t('game.player2Name')}" 
                           style="width: 100%; padding: 8px; border: 1px solid var(--border-color); border-radius: 4px;">
                </div>
            </div>
        `;
        
        stateManager.showModal(
            t('game.playerNames'),
            content,
            [
                { text: t('common.cancel'), class: 'secondary' },
                { 
                    text: t('common.start'), 
                    class: 'primary',
                    onClick: () => {
                        const p1Name = document.getElementById('player1-name').value.trim() || t('game.player1');
                        const p2Name = document.getElementById('player2-name').value.trim() || t('game.player2');
                        stateManager.hideModal();
                        onNamesEntered(p1Name, p2Name);
                    }
                }
            ]
        );
    }
    
    showControlsInfo() {
        const content = `
            <div style="text-align: left; line-height: 1.6;">
                <h4>${t('controls.keyboard')}</h4>
                <ul>
                    <li><strong>1-9:</strong> ${t('controls.selectDirection')}</li>
                    <li><strong>Space:</strong> ${t('controls.confirmMove')}</li>
                    <li><strong>Escape:</strong> ${t('controls.cancelMove')}</li>
                    <li><strong>H:</strong> ${t('controls.showHelp')}</li>
                </ul>
                <h4>${t('controls.mouse')}</h4>
                <ul>
                    <li>${t('controls.clickDirection')}</li>
                    <li>${t('controls.clickDistance')}</li>
                    <li>${t('controls.clickConfirm')}</li>
                </ul>
            </div>
        `;
        
        stateManager.showModal(
            t('mainMenu.controls'),
            content,
            [{ text: t('common.ok'), class: 'primary' }]
        );
    }
    
    showRules() {
        const content = `
            <div style="text-align: left; line-height: 1.6;">
                <h4>–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ "–ó–∞–ª–∏—à–∏—Ç–∏—Å—è –Ω–∞ –¥–æ—à—Ü—ñ"</h4>
                <p><strong>–ú–µ—Ç–∞ –≥—Ä–∏:</strong> –ó–∞–ª–∏—à–∏—Ç–∏—Å—è –Ω–∞ –¥–æ—à—Ü—ñ –¥–æ–≤—à–µ –∑–∞ —Å—É–ø–µ—Ä–Ω–∏–∫–∞.</p>
                
                <h5>–û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞:</h5>
                <ul>
                    <li>–ì—Ä–∞–≤–µ—Ü—å –ø–æ—á–∏–Ω–∞—î –∑ —Ü–µ–Ω—Ç—Ä—É –¥–æ—à–∫–∏</li>
                    <li>–ó–∞ –æ–¥–∏–Ω —Ö—ñ–¥ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –≤ –æ–¥–Ω–æ–º—É –∑ 8 –Ω–∞–ø—Ä—è–º–∫—ñ–≤</li>
                    <li>–í—ñ–¥—Å—Ç–∞–Ω—å —Ö–æ–¥—É –æ–±–º–µ–∂–µ–Ω–∞ —Ä–æ–∑–º—ñ—Ä–æ–º –¥–æ—à–∫–∏</li>
                    <li>–ù–µ –º–æ–∂–Ω–∞ –≤–∏—Ö–æ–¥–∏—Ç–∏ –∑–∞ –º–µ–∂—ñ –¥–æ—à–∫–∏</li>
                    <li>–ì—Ä–∞–≤–µ—Ü—å, —è–∫–∏–π –Ω–µ –º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥, –ø—Ä–æ–≥—Ä–∞—î</li>
                </ul>
                
                <h5>–ö–µ—Ä—É–≤–∞–Ω–Ω—è:</h5>
                <ul>
                    <li><strong>–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:</strong> 1-9 –¥–ª—è –Ω–∞–ø—Ä—è–º–∫—É, Space –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</li>
                    <li><strong>–ú–∏—à–∞:</strong> –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∞–ø—Ä—è–º–∫—É —Ç–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ</li>
                </ul>
            </div>
        `;
        
        stateManager.showModal(
            '–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏',
            content,
            [{ text: '–ó—Ä–æ–∑—É–º—ñ–ª–æ', class: 'primary' }]
        );
    }
}