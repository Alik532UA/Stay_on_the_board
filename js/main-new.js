/**
 * –§–Ü–ù–ê–õ–¨–ù–ê –í–ï–†–°–Ü–Ø –ì–û–õ–û–í–ù–û–ì–û –§–ê–ô–õ–£ –î–û–î–ê–¢–ö–£
 * –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º: EventBus, Logger, DOMCache, Analytics, Validator, Network, Speech
 */

// === –Ü–ú–ü–û–†–¢–ò –°–ò–°–¢–ï–ú ===
import { ViewManager } from './view-manager.js';
import { MainMenuComponent } from './components/main-menu-component.js';
import { ModalComponent } from './components/modal-component.js';
import { stateManager } from './state-manager.js';
import { gameLogic } from './game-logic-new.js';
import { t, loadLanguage } from './localization.js';
import { initTheme, updateThemeButtons, updateThemeStyleDropdownActive, applyBodyBackground } from './ui.js';
import uk from '../lang/uk.js';
import en from '../lang/en.js';
import nl from '../lang/nl.js';
import crh from '../lang/crh.js';
import { eventBus } from './event-bus.js';
import { GameBoardComponent } from './components/game-board-component.js';
import { LocalGameComponent } from './components/local-game-component.js';
import { OnlineMenuComponent } from './components/online-menu-component.js';
import { GameControlsComponent } from './components/game-controls-component.js';

window.translationsAll = {
  uk,
  en,
  nl,
  crh
};

window.gameLogic = gameLogic;

// === –ö–õ–ê–° –ì–û–õ–û–í–ù–û–ì–û –î–û–î–ê–¢–ö–£ ===
class App {
    constructor() {
        window.app = this;
        this.viewManager = new ViewManager();
        this.isInitialized = false;
        this.startTime = Date.now();

        // === –ú–û–î–ê–õ–¨–ù–ï –í–Ü–ö–ù–û ===
        // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        let modalContainer = document.getElementById('modal-root');
        if (!modalContainer) {
            modalContainer = document.createElement('div');
            modalContainer.id = 'modal-root';
            document.body.appendChild(modalContainer);
        }
        this.modalComponent = new ModalComponent(modalContainer);

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ view
        stateManager.subscribe('ui.currentView', (view) => {
            Logger.debug('[App] ui.currentView changed:', { view });
            switch (view) {
                case 'mainMenu':
                    this.viewManager.render('mainMenu', MainMenuComponent);
                    break;
                case 'gameBoard':
                    this.viewManager.render('gameBoard', GameBoardComponent);
                    break;
                case 'onlineMenu':
                    this.viewManager.render('onlineMenu', OnlineMenuComponent);
                    break;
                default:
                    this.viewManager.render('mainMenu', MainMenuComponent);
            }
        });
        // –†–µ–Ω–¥–µ—Ä–∏–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π view
        const initialView = stateManager.getState('ui.currentView');
        Logger.debug('[App] Initial view:', { initialView });
        if (initialView) {
            switch (initialView) {
                case 'mainMenu':
                    this.viewManager.render('mainMenu', MainMenuComponent);
                    break;
                case 'gameBoard':
                    this.viewManager.render('gameBoard', GameBoardComponent);
                    break;
                case 'onlineMenu':
                    this.viewManager.render('onlineMenu', OnlineMenuComponent);
                    break;
                default:
                    this.viewManager.render('mainMenu', MainMenuComponent);
            }
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º
        this.initSystems();
        this.init();
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏
     */
    initSystems() {
        // –õ–æ–≥—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        Logger.start('App initialization', { timestamp: this.startTime });

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ EventBus middleware
        this.setupEventBusMiddleware();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Network middleware
        this.setupNetworkMiddleware();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Analytics
        this.setupAnalytics();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
        this.setupValidation();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        this.setupSpeechControl();

        Logger.info('Systems initialized successfully');
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î EventBus middleware
     */
    setupEventBusMiddleware() {
        // Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
        eventBus.use((eventData) => {
            Logger.debug('Event emitted', {
                event: eventData.event,
                data: eventData.data,
                timestamp: eventData.timestamp
            });
            return eventData;
        });

        // Middleware –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        eventBus.use((eventData) => {
            if (window.analytics) {
                window.analytics.track('app_event', {
                    event: eventData.event,
                    data: eventData.data
                });
            }
            return eventData;
        });

        Logger.info('EventBus middleware configured');
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î Network middleware
     */
    setupNetworkMiddleware() {
        if (window.networkManager) {
            // Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
            window.networkManager.useRequest((config) => {
                Logger.debug('Network request', {
                    url: config.url,
                    method: config.method,
                    headers: config.headers
                });
            });

            // Middleware –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
            window.networkManager.useRequest((config) => {
                if (window.analytics) {
                    window.analytics.track('network_request', {
                        url: config.url,
                        method: config.method
                    });
                }
            });

            // Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
            window.networkManager.useError((error) => {
                Logger.error('Network error', { error: error.message });

                if (window.analytics) {
                    window.analytics.trackError(error, { context: 'network' });
                }
            });

            Logger.info('Network middleware configured');
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
     */
    setupAnalytics() {
        if (window.analytics) {
            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            window.analytics.track('app_started', {
                version: '1.0.0',
                timestamp: this.startTime
            });

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            stateManager.subscribe('settings', (settings) => {
                window.analytics.trackSetting('settings_updated', settings);
            });

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —ñ–≥—Ä–æ–≤—ñ –ø–æ–¥—ñ—ó
            stateManager.subscribe('game', (gameState) => {
                if (gameState.isActive) {
                    window.analytics.trackGameEvent('game_state_changed', gameState);
                }
            });

            Logger.info('Analytics configured');
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
     */
    setupValidation() {
        if (window.validator) {
            // –í–∞–ª—ñ–¥—É—î–º–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
            stateManager.subscribe('game', (gameState) => {
                const result = window.validator.validateGameState(gameState);
                if (!result.isValid) {
                    Logger.warn('Invalid game state', { errors: result.errors });
                }
            });

            stateManager.subscribe('settings', (settings) => {
                const result = window.validator.validateSettings(settings);
                if (!result.isValid) {
                    Logger.warn('Invalid settings', { errors: result.errors });
                }
            });

            Logger.info('Validation configured');
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –≥–æ–ª–æ—Å–æ–≤–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
     */
    setupSpeechControl() {
        if (window.speechManager) {
            // –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
            window.speechManager.registerCommand('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', () => {
                this.showStats();
            });

            window.speechManager.registerCommand('–æ—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à', () => {
                if (window.domCache) {
                    window.domCache.clear();
                    window.speechManager.speak('–ö–µ—à –æ—á–∏—â–µ–Ω–æ');
                }
            });

            window.speechManager.registerCommand('–ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏', () => {
                this.showLogs();
            });

            Logger.info('Speech control configured');
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞—Ç–æ–∫
     */
    init() {
        if (this.isInitialized) return;

        Logger.info('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É Stay on the board');

        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–º–∏
            this.initTheme();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–≤–∏
            this.initLanguage();

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤
            this.setupGlobalControls();

            // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
            this.setupLanguageSubscription();

            // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Ç–µ–º–∏
            this.setupThemeSubscription();

            // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –≥—Ä–∏
            this.setupGameSubscription();

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫
            this.setupErrorHandling();

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            this.setupPerformanceMonitoring();

            // –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
            this.start();

            this.isInitialized = true;
            Logger.info('‚úÖ –î–æ–¥–∞—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
            if (window.analytics) {
                window.analytics.track('app_initialized', {
                    duration: Date.now() - this.startTime
                });
            }

        } catch (error) {
            Logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É', { error: error.message, stack: error.stack });
            this.handleError(error);
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–µ–º—É
     */
    initTheme() {
        try {
            initTheme();
            updateThemeButtons();
            updateThemeStyleDropdownActive();
            applyBodyBackground();
            Logger.info('‚úÖ –¢–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
        } catch (error) {
            Logger.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–µ–º–∏', { error: error.message });
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –º–æ–≤—É
     */
    initLanguage() {
        try {
            const currentLang = localStorage.getItem('lang') || 'uk';
            loadLanguage(currentLang);
            Logger.info('‚úÖ –ú–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞', { language: currentLang });
        } catch (error) {
            Logger.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–≤–∏', { error: error.message });
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –≥–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–Ω—Ç—Ä–æ–ª–∏
     */
    setupGlobalControls() {
        try {
            const themeStyleBtn = document.getElementById('theme-style-btn');
            const themeStyleDropdown = document.getElementById('theme-style-dropdown');
            const langBtn = document.getElementById('lang-btn');
            const langDropdown = document.getElementById('lang-dropdown');

            // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ç–µ–º–∏
            if (themeStyleBtn) {
                themeStyleBtn.addEventListener('click', (e) => {
                    if (themeStyleDropdown) themeStyleDropdown.classList.toggle('hidden');
                    if (langDropdown) langDropdown.classList.add('hidden');
                    e.stopPropagation();

                    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∫–ª—ñ–∫
                    if (window.analytics) {
                        window.analytics.trackClick('theme-style-button');
                    }
                });
            }

            // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º–æ–≤–∏
            if (langBtn) {
                langBtn.addEventListener('click', (e) => {
                    if (langDropdown) langDropdown.classList.toggle('hidden');
                    if (themeStyleDropdown) themeStyleDropdown.classList.add('hidden');
                    e.stopPropagation();

                    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∫–ª—ñ–∫
                    if (window.analytics) {
                        window.analytics.trackClick('language-button');
                    }
                });
            }

            // –ó–∞–∫—Ä–∏—Ç—Ç—è –¥—Ä–æ–ø–¥–∞—É–Ω—ñ–≤ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º–∏
            document.addEventListener('click', (e) => {
                if (themeStyleDropdown && !themeStyleDropdown.contains(e.target) && e.target !== themeStyleBtn) {
                    themeStyleDropdown.classList.add('hidden');
                }
                if (langDropdown && !langDropdown.contains(e.target) && e.target !== langBtn) {
                    langDropdown.classList.add('hidden');
                }
            });

            // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
            document.querySelectorAll('.lang-option').forEach(opt => {
                opt.addEventListener('click', () => {
                    const lang = opt.getAttribute('data-lang');
                    stateManager.setState('settings.language', lang);
                    if (langDropdown) langDropdown.classList.add('hidden');

                    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–º—ñ–Ω—É –º–æ–≤–∏
                    if (window.analytics) {
                        window.analytics.trackSetting('language', lang);
                    }
                });
            });

            // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–µ–º–∏
            document.querySelectorAll('.theme-style-row').forEach(row => {
                const style = row.getAttribute('data-style');
                row.querySelectorAll('.theme-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const theme = btn.getAttribute('data-theme');
                        stateManager.updateSettings({ style, theme });
                        if (themeStyleDropdown) themeStyleDropdown.classList.add('hidden');

                        // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–º—ñ–Ω—É —Ç–µ–º–∏
                        if (window.analytics) {
                            window.analytics.trackSetting('theme', theme);
                            window.analytics.trackSetting('style', style);
                        }
                    });
                });
            });

            Logger.info('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–Ω—Ç—Ä–æ–ª–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
        } catch (error) {
            Logger.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤', { error: error.message });
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
     */
    setupLanguageSubscription() {
        stateManager.subscribe('settings.language', (newLang) => {
            try {
                loadLanguage(newLang);
                this.updateLanguageDependentUI();
                Logger.info('üåç –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ', { language: newLang });

                // –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
                if (window.speechManager) {
                    const langCode = newLang + '-' + newLang.toUpperCase();
                    window.speechManager.setLanguage(langCode);
                }
            } catch (error) {
                Logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏', { error: error.message });
            }
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–º—ñ–Ω–∏ —Ç–µ–º–∏
     */
    setupThemeSubscription() {
        stateManager.subscribe('settings.theme', (newTheme) => {
            try {
                document.documentElement.setAttribute('data-theme', newTheme);
                updateThemeButtons();
                applyBodyBackground();
                Logger.info('üé® –¢–µ–º—É –∑–º—ñ–Ω–µ–Ω–æ', { theme: newTheme });
            } catch (error) {
                Logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Ç–µ–º–∏', { error: error.message });
            }
        });

        stateManager.subscribe('settings.style', (newStyle) => {
            try {
                document.documentElement.setAttribute('data-style', newStyle);
                updateThemeStyleDropdownActive();
                applyBodyBackground();
                Logger.info('üé® –°—Ç–∏–ª—å –∑–º—ñ–Ω–µ–Ω–æ', { style: newStyle });
            } catch (error) {
                Logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∏–ª—é', { error: error.message });
            }
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –≥—Ä–∏
     */
    setupGameSubscription() {
        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –≥—Ä–∏
        stateManager.subscribe('game.isActive', (isActive) => {
            Logger.info('üéÆ –°—Ç–∞–Ω –≥—Ä–∏ –∑–º—ñ–Ω–µ–Ω–æ', { isActive });

            if (window.analytics) {
                window.analytics.trackGameEvent('game_state_changed', { isActive });
            }
        });

        stateManager.subscribe('game.currentPlayer', (player) => {
            Logger.info('üë§ –ü–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å', { player });
        });

        stateManager.subscribe('game.points', (points) => {
            Logger.info('üìä –û—á–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ', { points });
        });

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ –≥—Ä–∏
        stateManager.subscribe('ui.error', (error) => {
            if (error) {
                Logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ UI', { error });

                if (window.analytics) {
                    window.analytics.trackError(error, { context: 'ui' });
                }
            }
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
     */
    setupErrorHandling() {
        // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        window.addEventListener('error', (event) => {
            Logger.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞', {
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                error: event.error
            });

            if (window.analytics) {
                window.analytics.trackError(event.error, { context: 'global' });
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö Promise –ø–æ–º–∏–ª–æ–∫
        window.addEventListener('unhandledrejection', (event) => {
            Logger.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ Promise –ø–æ–º–∏–ª–∫–∞', {
                reason: event.reason
            });

            if (window.analytics) {
                window.analytics.trackError(event.reason, { context: 'promise' });
            }
        });

        Logger.info('‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞');
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
     */
    setupPerformanceMonitoring() {
        // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        window.addEventListener('load', () => {
            const loadTime = Date.now() - this.startTime;
            Logger.info('üìä –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞', { loadTime });

            if (window.analytics) {
                window.analytics.trackPerformance('page_load', loadTime);
            }
        });

        // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É
        if (window.domCache) {
            setInterval(() => {
                const stats = window.domCache.getStats();
                if (stats.hitRate < 50) {
                    Logger.warn('‚ö†Ô∏è –ù–∏–∑—å–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É', { hitRate: stats.hitRate });
                }
            }, 60000); // –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        }

        Logger.info('‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
    }

    /**
     * –û–Ω–æ–≤–ª—é—î UI –∑–∞–ª–µ–∂–Ω–∏–π –≤—ñ–¥ –º–æ–≤–∏
     */
    updateLanguageDependentUI() {
        try {
            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const titleElements = document.querySelectorAll('[data-i18n]');
            titleElements.forEach(element => {
                const key = element.getAttribute('data-i18n');
                if (key) {
                    element.textContent = t(key);
                }
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏
            const placeholderElements = document.querySelectorAll('[data-i18n-placeholder]');
            placeholderElements.forEach(element => {
                const key = element.getAttribute('data-i18n-placeholder');
                if (key) {
                    element.placeholder = t(key);
                }
            });

            Logger.debug('UI –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ—ó –º–æ–≤–∏');
        } catch (error) {
            Logger.warn('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI', { error: error.message });
        }
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏
     */
    handleError(error) {
        Logger.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞—Ç–∫—É', {
            message: error.message,
            stack: error.stack,
            timestamp: new Date().toISOString()
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if (window.viewManager) {
            window.viewManager.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É', error.message);
        }

        // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ –∞–Ω–∞–ª—ñ—Ç–∏—Ü—ñ
        if (window.analytics) {
            window.analytics.trackError(error, { context: 'initialization' });
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –¥–æ–¥–∞—Ç–æ–∫
     */
    start() {
        try {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            stateManager.navigateTo('mainMenu');

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
            if (stateManager.getState('settings.speechEnabled') && window.speechManager) {
                window.speechManager.startListening();
            }

            Logger.info('üéÆ –î–æ–¥–∞—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ');

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–∞–ø—É—Å–∫
            if (window.analytics) {
                window.analytics.track('app_started');
            }

        } catch (error) {
            Logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É', { error: error.message });
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–¥–∞—Ç–∫—É
     */
    showStats() {
        const stats = {
            app: {
                uptime: Date.now() - this.startTime,
                isInitialized: this.isInitialized
            },
            state: stateManager.getStats(),
            cache: window.domCache ? window.domCache.getStats() : null,
            network: window.networkManager ? window.networkManager.getStats() : null,
            speech: window.speechManager ? window.speechManager.getStatus() : null,
            analytics: window.analytics ? window.analytics.getStats() : null,
            logs: Logger.getStats()
        };

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–¥–∞—Ç–∫—É:', stats);

        if (window.speechManager) {
            window.speechManager.speak('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å');
        }
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –ª–æ–≥–∏
     */
    showLogs() {
        const logs = Logger.getStoredLogs();
        console.log('üìã –õ–æ–≥–∏ –¥–æ–¥–∞—Ç–∫—É:', logs);

        if (window.speechManager) {
            window.speechManager.speak(`–ó–Ω–∞–π–¥–µ–Ω–æ ${logs.length} –ª–æ–≥—ñ–≤`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–¥–∞—Ç–∫—É
     */
    getStats() {
        return {
            uptime: Date.now() - this.startTime,
            isInitialized: this.isInitialized,
            systems: {
                eventBus: !!window.eventBus,
                logger: !!window.Logger,
                domCache: !!window.domCache,
                analytics: !!window.analytics,
                validator: !!window.validator,
                network: !!window.networkManager,
                speech: !!window.speechManager
            }
        };
    }

    /**
     * –ó–Ω–∏—â—É—î –¥–æ–¥–∞—Ç–æ–∫
     */
    destroy() {
        try {
            Logger.info('üîÑ –ó–Ω–∏—â–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É');

            // –ó—É–ø–∏–Ω—è—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
            if (window.speechManager) {
                window.speechManager.destroy();
            }

            // –ó—É–ø–∏–Ω—è—î–º–æ –º–µ—Ä–µ–∂–µ–≤—ñ –∑–∞–ø–∏—Ç–∏
            if (window.networkManager) {
                window.networkManager.destroy();
            }

            // –û—á–∏—â—É—î–º–æ –∫–µ—à
            if (window.domCache) {
                window.domCache.destroy();
            }

            // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
            if (window.analytics) {
                window.analytics.destroy();
            }

            // –û—á–∏—â—É—î–º–æ EventBus
            if (window.eventBus) {
                window.eventBus.destroy();
            }

            this.isInitialized = false;

            Logger.info('‚úÖ –î–æ–¥–∞—Ç–æ–∫ –∑–Ω–∏—â–µ–Ω–æ');

        } catch (error) {
            Logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É', { error: error.message });
        }
    }
}

// === –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ ===

// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –î–û–î–ê–¢–ö–£ ===
let app;

document.addEventListener('DOMContentLoaded', () => {
    try {
        app = new App();
        // –†–æ–±–∏–º–æ –¥–æ–¥–∞—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–±–∞–≥—É
        window.app = app;

        Logger.info('üéâ –î–æ–¥–∞—Ç–æ–∫ Stay on the board –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');

    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É:', error);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        document.body.innerHTML = `
            <div class="error-container">
                <h1>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h1>
                <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.</p>
                <p>–î–µ—Ç–∞–ª—ñ: ${error.message}</p>
            </div>
        `;
    }
});

// –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('beforeunload', () => {
    if (app) {
        app.destroy();
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—ñ–≤
if (typeof module !== 'undefined' && module.exports) {
    module.exports = App;
} 