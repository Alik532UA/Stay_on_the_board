import { stateManager } from './state-manager.js';
import Logger from './utils/logger.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–ª—è –≥—Ä–∏
 * @class SpeechManager
 */
class SpeechManager {
    constructor(options = {}) {
        const {
            enabled = true,
            language = 'uk-UA',
            continuous = false,
            interimResults = false,
            maxAlternatives = 1,
            onResult = null,
            onError = null,
            onStart = null,
            onEnd = null
        } = options;
        
        this.enabled = enabled;
        this.language = language;
        this.continuous = continuous;
        this.interimResults = interimResults;
        this.maxAlternatives = maxAlternatives;
        
        this.onResult = onResult;
        this.onError = onError;
        this.onStart = onStart;
        this.onEnd = onEnd;
        
        this.recognition = null;
        this.synthesis = null;
        this.isListening = false;
        this.isSpeaking = false;
        this.isDestroyed = false;
        
        this.commands = new Map();
        this.aliases = new Map();
        
        this.init();
    }
    
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–∏—Å—Ç–µ–º—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
     */
    init() {
        if (this.isDestroyed) return;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É Web Speech API
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            Logger.warn('Speech recognition not supported');
            this.enabled = false;
            return;
        }
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        this.recognition.continuous = this.continuous;
        this.recognition.interimResults = this.interimResults;
        this.recognition.maxAlternatives = this.maxAlternatives;
        this.recognition.lang = this.language;
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this.setupRecognitionHandlers();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∏–Ω—Ç–µ–∑ –º–æ–≤–∏
        this.initSynthesis();
        
        // –†–µ—î—Å—Ç—Ä—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        this.registerDefaultCommands();
        
        Logger.info('üé§ Speech manager initialized');
    }
    
    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     */
    setupRecognitionHandlers() {
        this.recognition.onstart = () => {
            this.isListening = true;
            Logger.info('Speech recognition started');
            
            if (this.onStart) {
                this.onStart();
            }
        };
        
        this.recognition.onend = () => {
            this.isListening = false;
            Logger.info('Speech recognition ended');
            
            if (this.onEnd) {
                this.onEnd();
            }
        };
        
        this.recognition.onresult = (event) => {
            const results = event.results;
            const transcript = results[results.length - 1][0].transcript.trim().toLowerCase();
            const confidence = results[results.length - 1][0].confidence;
            
            Logger.info('Speech recognized', { transcript, confidence });
            
            this.processCommand(transcript, confidence);
            
            if (this.onResult) {
                this.onResult(transcript, confidence);
            }
        };
        
        this.recognition.onerror = (event) => {
            Logger.error('Speech recognition error', { error: event.error });
            
            if (this.onError) {
                this.onError(event.error);
            }
        };
        
        this.recognition.onnomatch = () => {
            Logger.warn('No speech match found');
        };
    }
    
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–∏–Ω—Ç–µ–∑ –º–æ–≤–∏
     */
    initSynthesis() {
        if ('speechSynthesis' in window) {
            this.synthesis = window.speechSynthesis;
        } else {
            Logger.warn('Speech synthesis not supported');
        }
    }
    
    /**
     * –†–µ—î—Å—Ç—Ä—É—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
     */
    registerDefaultCommands() {
        // –ö–æ–º–∞–Ω–¥–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        this.registerCommand('–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', () => {
            stateManager.navigateTo('mainMenu');
            this.speak('–ü–µ—Ä–µ—Ö–æ–∂—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é');
        });
        
        this.registerCommand('–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', () => {
            stateManager.navigateTo('settings');
            this.speak('–í—ñ–¥–∫—Ä–∏–≤–∞—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
        });
        
        this.registerCommand('–≥—Ä–∞', () => {
            stateManager.navigateTo('game');
            this.speak('–ü–æ—á–∏–Ω–∞—é –≥—Ä—É');
        });
        
        // –ö–æ–º–∞–Ω–¥–∏ –≥—Ä–∏
        this.registerCommand('–Ω–æ–≤–∏–π —Ö—ñ–¥', () => {
            if (stateManager.getState('game.isActive')) {
                this.speak('–ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–æ–≥–æ —Ö–æ–¥—É');
            }
        });
        
        this.registerCommand('–ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–æ–¥–∏', () => {
            if (stateManager.getState('game.isActive')) {
                stateManager.setState('game.showingAvailableMoves', true);
                this.speak('–ü–æ–∫–∞–∑—É—é –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏');
            }
        });
        
        this.registerCommand('—Å—Ö–æ–≤–∞—Ç–∏ —Ö–æ–¥–∏', () => {
            if (stateManager.getState('game.isActive')) {
                stateManager.setState('game.showingAvailableMoves', false);
                this.speak('–°—Ö–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏');
            }
        });
        
        // –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ö–æ–¥—ñ–≤
        this.registerCommand('–≤–≥–æ—Ä—É', () => {
            this.handleDirectionCommand('up');
        });
        
        this.registerCommand('–≤–Ω–∏–∑', () => {
            this.handleDirectionCommand('down');
        });
        
        this.registerCommand('–ª—ñ–≤–æ—Ä—É—á', () => {
            this.handleDirectionCommand('left');
        });
        
        this.registerCommand('–ø—Ä–∞–≤–æ—Ä—É—á', () => {
            this.handleDirectionCommand('right');
        });
        
        this.registerCommand('–ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ', () => {
            this.handleDirectionCommand('diagonal');
        });
        
        // –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ
        for (let i = 1; i <= 5; i++) {
            this.registerCommand(`${i} –∫—Ä–æ–∫`, () => {
                this.handleDistanceCommand(i);
            });
            
            this.registerCommand(`${i} –∫—Ä–æ–∫—ñ–≤`, () => {
                this.handleDistanceCommand(i);
            });
        }
        
        // –ö–æ–º–∞–Ω–¥–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        this.registerCommand('–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', () => {
            this.handleConfirmCommand();
        });
        
        this.registerCommand('—Ç–∞–∫', () => {
            this.handleConfirmCommand();
        });
        
        this.registerCommand('–Ω—ñ', () => {
            this.handleCancelCommand();
        });
        
        this.registerCommand('—Å–∫–∞—Å—É–≤–∞—Ç–∏', () => {
            this.handleCancelCommand();
        });
        
        // –ö–æ–º–∞–Ω–¥–∏ –¥–æ–ø–æ–º–æ–≥–∏
        this.registerCommand('–¥–æ–ø–æ–º–æ–≥–∞', () => {
            this.speak('–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –≥—Ä–∞, –Ω–æ–≤–∏–π —Ö—ñ–¥, –ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–æ–¥–∏, –≤–≥–æ—Ä—É, –≤–Ω–∏–∑, –ª—ñ–≤–æ—Ä—É—á, –ø—Ä–∞–≤–æ—Ä—É—á, –ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ, –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –¥–æ –ø\'—è—Ç–∏ –∫—Ä–æ–∫—ñ–≤, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏, —Å–∫–∞—Å—É–≤–∞—Ç–∏');
        });
        
        this.registerCommand('—â–æ –º–æ–∂–Ω–∞ —Å–∫–∞–∑–∞—Ç–∏', () => {
            this.speak('–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –≥—Ä–∞, –Ω–æ–≤–∏–π —Ö—ñ–¥, –ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–æ–¥–∏, –≤–≥–æ—Ä—É, –≤–Ω–∏–∑, –ª—ñ–≤–æ—Ä—É—á, –ø—Ä–∞–≤–æ—Ä—É—á, –ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ, –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –¥–æ –ø\'—è—Ç–∏ –∫—Ä–æ–∫—ñ–≤, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏, —Å–∫–∞—Å—É–≤–∞—Ç–∏');
        });
        
        // –ê–ª—ñ–∞—Å–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
        this.registerAlias('–º–µ–Ω—é', '–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é');
        this.registerAlias('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
        this.registerAlias('–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É', '–≥—Ä–∞');
        this.registerAlias('–Ω–æ–≤—ã–π —Ö–æ–¥', '–Ω–æ–≤–∏–π —Ö—ñ–¥');
        this.registerAlias('–ø–æ–∫–∞–∑–∞—Ç—å —Ö–æ–¥—ã', '–ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–æ–¥–∏');
        this.registerAlias('—Å–∫—Ä—ã—Ç—å —Ö–æ–¥—ã', '—Å—Ö–æ–≤–∞—Ç–∏ —Ö–æ–¥–∏');
        this.registerAlias('–≤–≤–µ—Ä—Ö', '–≤–≥–æ—Ä—É');
        this.registerAlias('–≤–Ω–∏–∑', '–≤–Ω–∏–∑');
        this.registerAlias('–≤–ª–µ–≤–æ', '–ª—ñ–≤–æ—Ä—É—á');
        this.registerAlias('–≤–ø—Ä–∞–≤–æ', '–ø—Ä–∞–≤–æ—Ä—É—á');
        this.registerAlias('–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏', '–ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ');
        this.registerAlias('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏');
        this.registerAlias('–æ—Ç–º–µ–Ω–∏—Ç—å', '—Å–∫–∞—Å—É–≤–∞—Ç–∏');
        this.registerAlias('–ø–æ–º–æ—â—å', '–¥–æ–ø–æ–º–æ–≥–∞');
    }
    
    /**
     * –†–µ—î—Å—Ç—Ä—É—î –∫–æ–º–∞–Ω–¥—É
     * @param {string} phrase - –§—Ä–∞–∑–∞ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     * @param {Function} handler - –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏
     */
    registerCommand(phrase, handler) {
        this.commands.set(phrase.toLowerCase(), handler);
    }
    
    /**
     * –†–µ—î—Å—Ç—Ä—É—î –∞–ª—ñ–∞—Å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏
     * @param {string} alias - –ê–ª—ñ–∞—Å
     * @param {string} command - –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
     */
    registerAlias(alias, command) {
        this.aliases.set(alias.toLowerCase(), command.toLowerCase());
    }
    
    /**
     * –û–±—Ä–æ–±–ª—è—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—É –∫–æ–º–∞–Ω–¥—É
     * @param {string} transcript - –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
     * @param {number} confidence - –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     */
    processCommand(transcript, confidence) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ü–µ –∞–ª—ñ–∞—Å
        if (this.aliases.has(transcript)) {
            transcript = this.aliases.get(transcript);
        }
        
        // –®—É–∫–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –∑–±—ñ–≥
        let bestMatch = null;
        let bestScore = 0;
        
        for (const [command, handler] of this.commands) {
            const score = this.calculateSimilarity(transcript, command);
            if (score > bestScore && score > 0.7) { // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥ —Å—Ö–æ–∂–æ—Å—Ç—ñ
                bestScore = score;
                bestMatch = { command, handler };
            }
        }
        
        if (bestMatch) {
            Logger.info('Command executed', { 
                transcript, 
                command: bestMatch.command, 
                confidence, 
                similarity: bestScore 
            });
            
            try {
                bestMatch.handler();
            } catch (error) {
                Logger.error('Command execution error', { error: error.message });
                this.speak('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏');
            }
        } else {
            Logger.warn('No command match found', { transcript, confidence });
            this.speak('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞');
        }
    }
    
    /**
     * –û–±—á–∏—Å–ª—é—î —Å—Ö–æ–∂—ñ—Å—Ç—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ä—è–¥–∫–∞–º–∏
     * @param {string} str1 - –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
     * @param {string} str2 - –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫
     * @returns {number} –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å—Ö–æ–∂–æ—Å—Ç—ñ (0-1)
     */
    calculateSimilarity(str1, str2) {
        const longer = str1.length > str2.length ? str1 : str2;
        const shorter = str1.length > str2.length ? str2 : str1;
        
        if (longer.length === 0) {
            return 1.0;
        }
        
        const distance = this.levenshteinDistance(longer, shorter);
        return (longer.length - distance) / longer.length;
    }
    
    /**
     * –û–±—á–∏—Å–ª—é—î –≤—ñ–¥—Å—Ç–∞–Ω—å –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
     * @param {string} str1 - –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
     * @param {string} str2 - –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫
     * @returns {number} –í—ñ–¥—Å—Ç–∞–Ω—å –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
     */
    levenshteinDistance(str1, str2) {
        const matrix = [];
        
        for (let i = 0; i <= str2.length; i++) {
            matrix[i] = [i];
        }
        
        for (let j = 0; j <= str1.length; j++) {
            matrix[0][j] = j;
        }
        
        for (let i = 1; i <= str2.length; i++) {
            for (let j = 1; j <= str1.length; j++) {
                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1];
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j - 1] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j] + 1
                    );
                }
            }
        }
        
        return matrix[str2.length][str1.length];
    }
    
    /**
     * –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
     */
    startListening() {
        if (!this.enabled || this.isDestroyed) return;
        
        try {
            this.recognition.start();
            Logger.info('Started listening for voice commands');
        } catch (error) {
            Logger.error('Failed to start listening', { error: error.message });
        }
    }
    
    /**
     * –ó—É–ø–∏–Ω—è—î –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
     */
    stopListening() {
        if (!this.enabled || this.isDestroyed) return;
        
        try {
            this.recognition.stop();
            Logger.info('Stopped listening for voice commands');
        } catch (error) {
            Logger.error('Failed to stop listening', { error: error.message });
        }
    }
    
    /**
     * –ü—Ä–æ–≥–æ–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≥–æ–≤–æ—Ä—é–≤–∞–Ω–Ω—è
     * @param {Object} options - –û–ø—Ü—ñ—ó —Å–∏–Ω—Ç–µ–∑—É
     */
    speak(text, options = {}) {
        if (!this.synthesis || this.isDestroyed) return;
        
        const {
            voice = null,
            rate = 1.0,
            pitch = 1.0,
            volume = 1.0,
            lang = this.language
        } = options;
        
        // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø—Ä–æ–≥–æ–≤–æ—Ä—é–≤–∞–Ω–Ω—è
        this.synthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.rate = rate;
        utterance.pitch = pitch;
        utterance.volume = volume;
        utterance.lang = lang;
        
        if (voice) {
            utterance.voice = voice;
        }
        
        utterance.onstart = () => {
            this.isSpeaking = true;
            Logger.info('Started speaking', { text });
        };
        
        utterance.onend = () => {
            this.isSpeaking = false;
            Logger.info('Finished speaking', { text });
        };
        
        utterance.onerror = (event) => {
            this.isSpeaking = false;
            Logger.error('Speech synthesis error', { error: event.error, text });
        };
        
        this.synthesis.speak(utterance);
    }
    
    /**
     * –ó—É–ø–∏–Ω—è—î –ø—Ä–æ–≥–æ–≤–æ—Ä—é–≤–∞–Ω–Ω—è
     */
    stopSpeaking() {
        if (this.synthesis) {
            this.synthesis.cancel();
            this.isSpeaking = false;
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–ª–æ—Å–∏
     * @returns {Array} –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—ñ–≤
     */
    getVoices() {
        if (!this.synthesis) return [];
        
        return this.synthesis.getVoices().filter(voice => 
            voice.lang.startsWith('uk') || 
            voice.lang.startsWith('en') || 
            voice.lang.startsWith('nl') || 
            voice.lang.startsWith('crh')
        );
    }
    
    /**
     * –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º–∫—É
     * @param {string} direction - –ù–∞–ø—Ä—è–º–æ–∫
     */
    handleDirectionCommand(direction) {
        if (!stateManager.getState('game.isActive')) {
            this.speak('–ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            return;
        }
        
        stateManager.setState('game.selectedDirection', direction);
        this.speak(`–û–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä—è–º–æ–∫: ${direction}`);
    }
    
    /**
     * –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –≤—ñ–¥—Å—Ç–∞–Ω—ñ
     * @param {number} distance - –í—ñ–¥—Å—Ç–∞–Ω—å
     */
    handleDistanceCommand(distance) {
        if (!stateManager.getState('game.isActive')) {
            this.speak('–ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            return;
        }
        
        stateManager.setState('game.selectedDistance', distance);
        this.speak(`–û–±—Ä–∞–Ω–æ –≤—ñ–¥—Å—Ç–∞–Ω—å: ${distance} –∫—Ä–æ–∫—ñ–≤`);
    }
    
    /**
     * –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
     */
    handleConfirmCommand() {
        if (!stateManager.getState('game.isActive')) {
            this.speak('–ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            return;
        }
        
        const direction = stateManager.getState('game.selectedDirection');
        const distance = stateManager.getState('game.selectedDistance');
        
        if (!direction || !distance) {
            this.speak('–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫ —Ç–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å');
            return;
        }
        
        // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É
        this.speak('–•—ñ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ');
    }
    
    /**
     * –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
     */
    handleCancelCommand() {
        if (!stateManager.getState('game.isActive')) {
            this.speak('–ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            return;
        }
        
        stateManager.setState('game.selectedDirection', null);
        stateManager.setState('game.selectedDistance', null);
        this.speak('–•—ñ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –º–æ–≤—É
     * @param {string} language - –ö–æ–¥ –º–æ–≤–∏
     */
    setLanguage(language) {
        this.language = language;
        if (this.recognition) {
            this.recognition.lang = language;
        }
    }
    
    /**
     * –í–∫–ª—é—á–∞—î/–≤–∏–∫–ª—é—á–∞—î –≥–æ–ª–æ—Å–æ–≤–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
     * @param {boolean} enabled - –ß–∏ —É–≤—ñ–º–∫–Ω—É—Ç–∏
     */
    setEnabled(enabled) {
        this.enabled = enabled;
        
        if (!enabled && this.isListening) {
            this.stopListening();
        }
        
        if (!enabled && this.isSpeaking) {
            this.stopSpeaking();
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
     * @returns {Object} –°—Ç–∞—Ç—É—Å
     */
    getStatus() {
        return {
            enabled: this.enabled,
            isListening: this.isListening,
            isSpeaking: this.isSpeaking,
            language: this.language,
            commandsCount: this.commands.size,
            aliasesCount: this.aliases.size,
            voicesAvailable: this.getVoices().length
        };
    }
    
    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        return {
            commandsExecuted: 0, // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫
            recognitionErrors: 0,
            synthesisErrors: 0
        };
    }
    
    /**
     * –ó–Ω–∏—â—É—î –µ–∫–∑–µ–º–ø–ª—è—Ä
     */
    destroy() {
        this.isDestroyed = true;
        
        if (this.isListening) {
            this.stopListening();
        }
        
        if (this.isSpeaking) {
            this.stopSpeaking();
        }
        
        this.commands.clear();
        this.aliases.clear();
        
        Logger.info('Speech manager destroyed');
    }
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–±—Ä–∞–Ω–∏–π –≥–æ–ª–æ—Å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
 * @returns {string} name
 */
export function getCurrentVoice() {
    const lang = stateManager.getState('settings.language');
    return localStorage.getItem(`voice_${lang}`) || '';
}

export function getVoices() { return []; }
export function getVoicesForLanguage() { return []; }

/**
 * –û–∑–≤—É—á—É—î —ñ–≥—Ä–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {string} message
 * @param {Object} options
 */
export function speakGameMessage(message, options = {}) {
    if (window.speechManager) {
        window.speechManager.speak(message, options);
    }
}

/**
 * –û–∑–≤—É—á—É—î —Ö—ñ–¥
 * @param {string} moveText
 * @param {Object} options
 */
export function speakMove(moveText, options = {}) {
    if (window.speechManager) {
        window.speechManager.speak(moveText, options);
    }
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–±—Ä–∞–Ω–∏–π –≥–æ–ª–æ—Å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
 * @param {string} lang
 * @param {string} voiceName
 */
export function setVoiceForLanguage(lang, voiceName) {
    localStorage.setItem(`voice_${lang}`, voiceName);
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≥–æ–ª–æ—Å–∏ Web Speech API
 * @returns {Promise<void>}
 */
export function initVoices() {
    return new Promise((resolve) => {
        if (window.speechSynthesis.getVoices().length !== 0) {
            resolve();
        } else {
            window.speechSynthesis.onvoiceschanged = () => {
                resolve();
            };
        }
    });
}

/**
 * –ó—É–ø–∏–Ω—è—î –ø—Ä–æ–≥–æ–≤–æ—Ä—é–≤–∞–Ω–Ω—è
 */
export function stopSpeaking() {
    if (window.speechManager) {
        window.speechManager.stopSpeaking();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
window.speechManager = new SpeechManager({
    enabled: stateManager.getState('settings.speechEnabled'),
    language: stateManager.getState('settings.language') + '-' + stateManager.getState('settings.language').toUpperCase(),
    onResult: (transcript, confidence) => {
        Logger.info('Voice command recognized', { transcript, confidence });
    },
    onError: (error) => {
        Logger.error('Voice recognition error', { error });
    }
});

// –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
stateManager.subscribe('settings.speechEnabled', (enabled) => {
    if (window.speechManager) {
        window.speechManager.setEnabled(enabled);
    }
});

stateManager.subscribe('settings.language', (language) => {
    if (window.speechManager) {
        const langCode = language + '-' + language.toUpperCase();
        window.speechManager.setLanguage(langCode);
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—ñ–≤
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SpeechManager;
} 