// === –ú–û–í–ù–ê –ü–Ü–î–¢–†–ò–ú–ö–ê ===
import { findPiece, hasValidMoves, getAllValidMoves, getDirectionDelta, getDirectionText, getDirectionArrow } from './game-core.js';
import { showModal, hideModal, renderBoard, toggleBoardVisibility, generateDistanceButtons, handleDirectionSelect, handleDistanceSelect, resetSelections, showMainMenu, showOnlineGameMenu, showRules, showControlsInfo, showBoardSizeSelection, initStyle, changeStyle, initTheme, toggleTheme, initOnlineUsers } from './ui.js';
import { t, loadLanguage, updateUIWithLanguage } from './localization.js';

document.addEventListener('DOMContentLoaded', () => {
    function loadLanguage(lang) {
        window.translations = window.translationsAll[lang];
        currentLang = lang;
        localStorage.setItem('lang', lang);
        updateUIWithLanguage();
    }

    function updateUIWithLanguage() {
        // –û–Ω–æ–≤–ª—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–µ
        if (!modalOverlay.classList.contains('hidden')) {
            openMainMenu();
        }
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∏ –ø–æ–∑–∞ –º–æ–¥–∞–ª–∫–æ—é
        messageAreaEl.textContent = t('mainMenu.welcome');
        playerTurnIndicatorEl.textContent = t('mainMenu.playerTurn') || '';
        opponentNameEl.textContent = t('mainMenu.opponent') || '';
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    }

    // --- –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ ---
    let board = [];
    let blockedCells = []; // –ú–∞—Å–∏–≤ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
    let numberCells = 0;
    let points = 0;
    let isPlayerTurn = false;
    let selectedDirection = null;
    let selectedDistance = null;
    let blockedMode = false; // –†–µ–∂–∏–º –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
    let isOnlineGame = false; // –ß–∏ —Ü–µ –æ–Ω–ª–∞–π–Ω –≥—Ä–∞
    let isHost = false; // –ß–∏ —î —Ö–æ—Å—Ç–æ–º –∫—ñ–º–Ω–∞—Ç–∏
    let roomId = null; // ID –∫—ñ–º–Ω–∞—Ç–∏
    let peerConnection = null; // WebRTC –∑\'—î–¥–Ω–∞–Ω–Ω—è
    let dataChannel = null; // –ö–∞–Ω–∞–ª –¥–ª—è –æ–±–º—ñ–Ω—É –¥–∞–Ω–∏–º–∏
    let isConnected = false; // –ß–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –≥—Ä–∞–≤—Ü—ñ
    let waitingForOpponent = false; // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å—É–ø–µ—Ä–Ω–∏–∫–∞
    let signalingSocket = null; // WebSocket –¥–ª—è signaling
    const version = "0.1";

    // –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π signaling —Å–µ—Ä–≤–µ—Ä
    const SIGNALING_SERVER = 'wss://signaling-server-1.glitch.me';

    const gameBoardEl = document.getElementById('game-board');
    const scoreDisplayEl = document.getElementById('score-display');
    const messageAreaEl = document.getElementById('message-area');
    const hideBoardCheckbox = document.getElementById('hide-board-checkbox');
    const blockedModeCheckbox = document.getElementById('blocked-mode-checkbox');
    
    const visualControlsEl = document.getElementById('visual-controls');
    const directionGridEl = document.getElementById('direction-grid');
    const distanceSelectorEl = document.getElementById('distance-selector');
    const confirmMoveBtn = document.getElementById('confirm-move-btn');
    const noMovesBtn = document.getElementById('no-moves-btn');
    const debugMovesBtn = document.getElementById('debug-moves-btn');
    const styleSelect = document.getElementById('style-select');
    const computerMoveDisplayEl = document.getElementById('computer-move-display');
    const onlineCountEl = document.getElementById('online-count');
    const showMovesCheckbox = document.getElementById('show-moves-checkbox');

    function updateComputerMoveDisplay({direction, distance, isComputer, isPlayer}) {
        const el = computerMoveDisplayEl;
        if (!el) return;
        let html = '';
        let color = isComputer ? '#d32f2f' : (isPlayer ? '#1976d2' : '');
        el.classList.remove('confirm-btn-active');
        el.onclick = null;
        if (isComputer || isPlayer) {
            if (direction && distance) {
                html = `<span style="color: ${color}; font-size: 1em; font-weight: bold;">${getDirectionArrow(direction)} ${distance}</span>`;
                if (isPlayer) {
                    el.classList.add('confirm-btn-active');
                    el.onclick = () => {
                        if (selectedDirection && selectedDistance) {
                            confirmMoveBtn.click();
                        }
                    };
                }
            } else if (direction) {
                html = `<span style="color: ${color}; font-size: 2em; font-weight: bold;">${getDirectionArrow(direction)}</span>`;
            } else if (distance) {
                html = `<span style="color: ${color}; font-size: 2em; font-weight: bold;">${distance}</span>`;
            }
        }
        el.innerHTML = html;
    }

    // –ï–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –æ–Ω–ª–∞–π–Ω –≥—Ä–∏
    const onlineGamePanelEl = document.getElementById('online-game-panel');
    const connectionIndicatorEl = document.getElementById('connection-indicator');
    const connectionTextEl = document.getElementById('connection-text');
    const webrtcSignalingAreaEl = document.getElementById('webrtc-signaling-area');
    const webrtcInstructionsEl = document.getElementById('webrtc-instructions');
    const webrtcDataOutputEl = document.getElementById('webrtc-data-output');
    const webrtcDataInputEl = document.getElementById('webrtc-data-input');
    const webrtcConfirmBtn = document.getElementById('webrtc-confirm-btn');
    const playerTurnIndicatorEl = document.getElementById('player-turn-indicator');
    const opponentNameEl = document.getElementById('opponent-name');

    const modalOverlay = document.getElementById('modal-overlay');
    const modalTitle = document.getElementById('modal-title');
    const modalBody = document.getElementById('modal-body');
    const modalFooter = document.getElementsByClassName('modal-footer')[0];
    const themeToggle = document.getElementById('theme-toggle');
    const lightThemeBtn = document.getElementById('light-theme-btn');
    const darkThemeBtn = document.getElementById('dark-theme-btn');

    // --- –ù–æ–≤—ñ —Ç–æ–ø-–∫–æ–Ω—Ç—Ä–æ–ª–∏ ---
    const themeStyleBtn = document.getElementById('theme-style-btn');
    const themeStyleDropdown = document.getElementById('theme-style-dropdown');
    const styleOptionsList = document.getElementById('style-options');
    const styleOptions = styleOptionsList ? styleOptionsList.querySelectorAll('.style-option') : [];
    const langBtn = document.getElementById('lang-btn');
    const langDropdown = document.getElementById('lang-dropdown');
    const langFlag = document.getElementById('lang-flag');
    const langOptions = document.querySelectorAll('.lang-option');
    const flagMap = { uk: 'flag-uk', en: 'flag-en', crh: 'flag-crh' };

    // –í—ñ–¥–∫—Ä–∏—Ç–∏/–∑–∞–∫—Ä–∏—Ç–∏ –¥—Ä–æ–ø–¥–∞—É–Ω–∏
    if (themeStyleBtn && themeStyleDropdown) {
        themeStyleBtn.addEventListener('click', (e) => {
            themeStyleDropdown.classList.toggle('hidden');
            langDropdown.classList.add('hidden');
            e.stopPropagation();
        });
    }
    if (langBtn && langDropdown) {
        langBtn.addEventListener('click', (e) => {
            langDropdown.classList.toggle('hidden');
            themeStyleDropdown.classList.add('hidden');
            e.stopPropagation();
        });
    }
    document.addEventListener('click', (e) => {
        if (!themeStyleDropdown.contains(e.target) && e.target !== themeStyleBtn) themeStyleDropdown.classList.add('hidden');
        if (!langDropdown.contains(e.target) && e.target !== langBtn) langDropdown.classList.add('hidden');
    });

    // –¢–µ–º–∞
    function updateThemeButtons() {
        document.getElementById('theme-style-icon').textContent = 'üåó';
        updateThemeStyleDropdownActive();
    }
    if (lightThemeBtn && darkThemeBtn) {
        lightThemeBtn.addEventListener('click', () => {
            document.documentElement.setAttribute('data-theme', 'light');
            localStorage.setItem('theme', 'light');
            updateThemeButtons();
        });
        darkThemeBtn.addEventListener('click', () => {
            document.documentElement.setAttribute('data-theme', 'dark');
            localStorage.setItem('theme', 'dark');
            updateThemeButtons();
        });
        updateThemeButtons();
    }

    // –°—Ç–∏–ª—å
    const styleNames = {
        classic: { uk: 'Ubuntu', en: 'Ubuntu', crh: 'Ubuntu' },
        peak: { uk: 'PEAK', en: 'PEAK', crh: 'PEAK' },
        cs2: { uk: 'CS 2', en: 'CS 2', crh: 'CS 2' },
        glass: { uk: 'Glassmorphism', en: 'Glassmorphism', crh: 'Glassmorphism' },
        material: { uk: 'Material You', en: 'Material You', crh: 'Material You' }
    };
    function updateStyleDropdownLang() {
        const lang = localStorage.getItem('lang') || 'uk';
        styleOptions.forEach(opt => {
            const style = opt.getAttribute('data-style');
            if (styleNames[style]) opt.textContent = styleNames[style][lang];
        });
        updateThemeStyleDropdownActive();
    }
    if (styleOptionsList) {
        styleOptions.forEach(opt => {
            opt.addEventListener('click', () => {
                const style = opt.getAttribute('data-style');
                localStorage.setItem('style', style);
                document.documentElement.setAttribute('data-style', style);
                themeStyleDropdown.classList.add('hidden');
            });
        });
        updateStyleDropdownLang();
    }
    // –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∏ —Å—Ç–∏–ª—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–æ–≤–∏
    if (langBtn) {
        langBtn.addEventListener('click', updateStyleDropdownLang);
    }

    // –ú–æ–≤–∞
    function updateLangFlag() {
        const lang = localStorage.getItem('lang') || 'uk';
        langFlag.className = 'flag ' + (flagMap[lang] || 'flag-uk');
        langOptions.forEach(opt => {
            opt.classList.toggle('selected', opt.getAttribute('data-lang') === lang);
        });
    }
    langOptions.forEach(opt => {
        opt.addEventListener('click', () => {
            const lang = opt.getAttribute('data-lang');
            localStorage.setItem('lang', lang);
            alert('–ó–º—ñ–Ω–∏ –º–æ–≤–∏ –∑–∞—Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏.\nLanguage changes will apply after page reload.\nTilni de√±i≈ütirmek i√ß√ºn saifeni qayta y√ºkle√±iz.');
            updateLangFlag();
            langDropdown.classList.add('hidden');
            // loadLanguage(lang); // —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–¥—Ä–∞–∑—É –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏
        });
    });
    updateLangFlag();

    // --- –î—Ä–æ–ø–¥–∞—É–Ω —Ç–µ–º–∞+—Å—Ç–∏–ª—å (–Ω–æ–≤–∞ –ª–æ–≥—ñ–∫–∞) ---
    const themeStyleRows = document.querySelectorAll('.theme-style-row');
    function updateThemeStyleDropdownActive() {
        const currentStyle = localStorage.getItem('style') || 'classic';
        const currentTheme = localStorage.getItem('theme') || 'light';
        themeStyleRows.forEach(row => {
            const style = row.getAttribute('data-style');
            row.querySelectorAll('.theme-btn').forEach(btn => {
                const btnTheme = btn.getAttribute('data-theme');
                btn.classList.toggle('active', style === currentStyle && btnTheme === currentTheme);
            });
        });
    }
    themeStyleRows.forEach(row => {
        const style = row.getAttribute('data-style');
        row.querySelectorAll('.theme-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const theme = btn.getAttribute('data-theme');
                localStorage.setItem('style', style);
                localStorage.setItem('theme', theme);
                document.documentElement.setAttribute('data-style', style);
                document.documentElement.setAttribute('data-theme', theme);
                updateThemeButtons();
                updateThemeStyleDropdownActive();
                themeStyleDropdown.classList.add('hidden');
            });
        });
    });
    updateThemeStyleDropdownActive();

    // --- –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≥—Ä–∏ ---

    function renderBoard() {
        gameBoardEl.innerHTML = '';
        gameBoardEl.style.gridTemplateColumns = `repeat(${numberCells}, 1fr)`;
        for (let i = 0; i < numberCells; i++) {
            for (let j = 0; j < numberCells; j++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                if ((i + j) % 2 === 0) {
                    cell.classList.add('cell-light');
                } else {
                    cell.classList.add('cell-dark');
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞
                if (blockedMode && blockedCells.some(pos => pos.row === i && pos.col === j)) {
                    cell.classList.add('cell-blocked');
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ö–æ–¥—É
                if (window.showingAvailableMoves && window.availableMoves) {
                    if (window.availableMoves.some(move => move.newRow === i && move.newCol === j)) {
                        cell.classList.add('cell-available');
                    }
                }
                
                if (board[i][j] === 1) {
                    cell.classList.add('piece');
                    cell.textContent = '‚ôõ';
                }
                gameBoardEl.appendChild(cell);
            }
        }
        scoreDisplayEl.textContent = points;
    }

    function startGame(size) {
        numberCells = size;
        points = 0;
        isPlayerTurn = true;
        blockedMode = blockedModeCheckbox.checked;
        board = Array(numberCells).fill(0).map(() => Array(numberCells).fill(0));
        blockedCells = []; // –û—á–∏—â–∞—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        
        // –û—á–∏—â–∞—î–º–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤
        window.showingAvailableMoves = false;
        window.availableMoves = null;
        
        const startRow = Math.floor(Math.random() * numberCells);
        const startCol = Math.floor(Math.random() * numberCells);
        board[startRow][startCol] = 1;
        console.log('[startGame] board after placing piece:', board);
        
        hideBoardCheckbox.checked = false;
        gameBoardEl.classList.remove('board-hidden');
        renderBoard();
        generateDistanceButtons();
        resetSelections(true);
        hideModal();
        
        const modeText = blockedMode ? " (—Ä–µ–∂–∏–º –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫)" : "";
        messageAreaEl.textContent = `–í–∞—à —Ö—ñ–¥: –æ–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫ —Ç–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å.${modeText}`;
        visualControlsEl.classList.remove('hidden');
        updateComputerMoveDisplay({});
    }

    function processPlayerMove() {
        console.log('[processPlayerMove] called', { isPlayerTurn, selectedDirection, selectedDistance });
        if (!isPlayerTurn) {
            console.log('[processPlayerMove] Not player turn');
            return;
        }
        if (!selectedDirection || !selectedDistance) {
            console.log('[processPlayerMove] Direction or distance not selected', { selectedDirection, selectedDistance });
            messageAreaEl.textContent = "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫ –¢–ê –≤—ñ–¥—Å—Ç–∞–Ω—å!";
            return;
        }
        const piecePos = findPiece(board, numberCells);
        console.log('[processPlayerMove] piecePos', piecePos);
        if (!piecePos) {
            console.log('[processPlayerMove] No piece found');
            return;
        }
        const { row, col } = piecePos;
        const { dr, dc } = getDirectionDelta(selectedDirection);
        const newRow = row + dr * selectedDistance;
        const newCol = col + dc * selectedDistance;
        console.log('[processPlayerMove] Calculated new position', { newRow, newCol });
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏
        if (newRow >= 0 && newRow < numberCells && newCol >= 0 && newCol < numberCells) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ (–≤ —Ä–µ–∂–∏–º—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫)
            if (blockedMode && blockedCells.some(pos => pos.row === newRow && pos.col === newCol)) {
                const directionText = getDirectionText(selectedDirection);
                const reason = `–í–∏ —Å–ø—Ä–æ–±—É–≤–∞–ª–∏ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ—ñ–≥—É—Ä—É –Ω–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É ${directionText}. –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞!`;
                console.log('[processPlayerMove] Blocked cell move, ending game', { newRow, newCol });
                if (isOnlineGame) {
                    endOnlineGame(reason);
                } else {
                    endGame(reason);
                }
                return;
            }
            // –ë–ª–æ–∫—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º
            if (blockedMode) {
                blockedCells.push({ row, col });
                console.log('[processPlayerMove] Blocked current cell', { row, col });
            }
            
            // –û—á–∏—â–∞—î–º–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤
            window.showingAvailableMoves = false;
            window.availableMoves = null;
            
            board[row][col] = 0;
            board[newRow][newCol] = 1;
            points++;
            renderBoard();
            isPlayerTurn = false;
            messageAreaEl.textContent = "";
            resetSelections();
            generateDistanceButtons();
            resetSelections(true);
            updateComputerMoveDisplay({}); // –û—á–∏—â–∞—î–º–æ —Ü–µ–Ω—Ç—Ä –ø—ñ—Å–ª—è —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
            console.log('[processPlayerMove] Move completed', { row, col, newRow, newCol, points });
            updateComputerMoveDisplay({});
            if (isOnlineGame) {
                playerTurnIndicatorEl.textContent = '–•—ñ–¥ —Å—É–ø–µ—Ä–Ω–∏–∫–∞';
                
                // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ö—ñ–¥ —Å—É–ø–µ—Ä–Ω–∏–∫—É
                const move = {
                    direction: selectedDirection,
                    distance: selectedDistance
                };
                sendMoveToOpponent(move);
            } else {
                setTimeout(computerMove, 1000);
            }
            // –ü—ñ—Å–ª—è –≤—Å—ñ—Ö –∑–º—ñ–Ω ‚Äî —è–∫—â–æ —á–µ–∫–±–æ–∫—Å —É–≤—ñ–º–∫–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É
            if (showMovesCheckbox && showMovesCheckbox.checked) {
                showAvailableMoves();
            }
        } else {
            const directionText = getDirectionText(selectedDirection);
            const reason = `–í–∏ —Å–ø—Ä–æ–±—É–≤–∞–ª–∏ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ—ñ–≥—É—Ä—É –Ω–∞ ${selectedDistance} –∫–ª—ñ—Ç–∏–Ω(–∫—É) ${directionText} —ñ –≤–∏–π—à–ª–∏ –∑–∞ –º–µ–∂—ñ –¥–æ—à–∫–∏.`;
            console.log('[processPlayerMove] Out of bounds', { newRow, newCol });
            if (isOnlineGame) {
                endOnlineGame(reason);
            } else {
                endGame(reason);
            }
        }
    }

    function checkNoMoves() {
        if (!isPlayerTurn) return;
        
        if (hasValidMoves(board, blockedCells, blockedMode, numberCells)) {
            const reason = "–í–∏ –∑–∞—è–≤–∏–ª–∏ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤, –∞–ª–µ —É –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ —Ö–æ–¥–∏. –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞!";
            if (isOnlineGame) {
                endOnlineGame(reason);
            } else {
                endGame(reason);
            }
        } else {
            const reason = "–í–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–∏–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤. –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!";
            if (isOnlineGame) {
                // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—É–ø–µ—Ä–Ω–∏–∫—É
                if (dataChannel && dataChannel.readyState === 'open') {
                    const message = {
                        type: 'noMoves'
                    };
                    dataChannel.send(JSON.stringify(message));
                }
                endOnlineGame(reason);
            } else {
                endGame(reason);
            }
        }
    }

    function showAvailableMoves() {
        if (!isPlayerTurn) return;
        
        window.availableMoves = null;
        window.showingAvailableMoves = false;
        const validMoves = getAllValidMoves(board, blockedCells, blockedMode, numberCells);
        if (validMoves.length === 0) {
            messageAreaEl.textContent = "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤!";
            return;
        }
        
        window.availableMoves = validMoves;
        window.showingAvailableMoves = true;
        renderBoard();
        
        let movesText = "–î–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏:\n";
        validMoves.forEach((move, index) => {
            movesText += `${index + 1}. ${move.directionText} –Ω–∞ ${move.distance} –∫–ª—ñ—Ç–∏–Ω–∫—É\n`;
        });
        
        messageAreaEl.textContent = movesText;
        
        // –ù–µ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –≤–æ–Ω–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –ø–æ–∫–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —á–µ–∫–±–æ–∫—Å
    }

    function computerMove() {
        if (isPlayerTurn) return;
        
        const validMoves = getAllValidMoves(board, blockedCells, blockedMode, numberCells);
        if (validMoves.length === 0) {
            endGame("–ö–æ–º–ø'—é—Ç–µ—Ä –Ω–µ –º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥. –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!");
            return;
        }
        
        const randomMove = validMoves[Math.floor(Math.random() * validMoves.length)];
        const piecePos = findPiece(board, numberCells);
        if (!piecePos) return;
        
        const { row, col } = piecePos;
        const { dr, dc } = getDirectionDelta(randomMove.direction);
        const newRow = row + dr * randomMove.distance;
        const newCol = col + dc * randomMove.distance;
        
        // –ë–ª–æ–∫—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º
        if (blockedMode) {
            blockedCells.push({ row, col });
        }
        
        board[row][col] = 0;
        board[newRow][newCol] = 1;
        
        renderBoard();
        generateDistanceButtons();
        resetSelections(true);
        
        const directionText = getDirectionText(randomMove.direction);
        messageAreaEl.textContent = `–ö–æ–º–ø'—é—Ç–µ—Ä –∑—Ä–æ–±–∏–≤ —Ö—ñ–¥: ${directionText} –Ω–∞ ${randomMove.distance} –∫–ª—ñ—Ç–∏–Ω–∫—É.`;
        updateComputerMoveDisplay({direction: randomMove.direction, distance: randomMove.distance, isComputer: true});
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è, —è–∫—â–æ —á–µ–∫–±–æ–∫—Å —É–≤—ñ–º–∫–Ω–µ–Ω–æ
        if (showMovesCheckbox && showMovesCheckbox.checked) {
            window.availableMoves = null;
            window.showingAvailableMoves = false;
            showAvailableMoves();
        } else {
            window.showingAvailableMoves = false;
            window.availableMoves = null;
        }
        isPlayerTurn = true;
        // –ü—ñ—Å–ª—è –≤—Å—ñ—Ö –∑–º—ñ–Ω ‚Äî —è–∫—â–æ —á–µ–∫–±–æ–∫—Å —É–≤—ñ–º–∫–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–æ–¥–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è
        if (showMovesCheckbox && showMovesCheckbox.checked) {
            showAvailableMoves();
        }
        // setTimeout –≤–∏–¥–∞–ª–µ–Ω–æ, —Ü–µ–Ω—Ç—Ä –Ω–µ –æ—á–∏—â–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    }

    function endGame(reason) {
        isPlayerTurn = false;
        visualControlsEl.classList.add('hidden');
        showModal(
            "–ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞!",
            `<p>${reason}</p><p><strong>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–±—Ä–∞–Ω–∏—Ö –æ—á–æ–∫: ${points}</strong></p><p>–í–µ—Ä—Å—ñ—è –≥—Ä–∏: ${version}</p>`,
            [
                { text: "–í–∏–±—Ä–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –¥–æ—à–∫–∏", class: "primary", onClick: openBoardSizeSelection },
                { text: "–ú–µ–Ω—é", onClick: openMainMenu }
            ]
        );
    }

    function toggleBoardVisibility() {
        if (hideBoardCheckbox.checked) {
            gameBoardEl.classList.add('board-hidden');
        } else {
            gameBoardEl.classList.remove('board-hidden');
        }
    }

    function generateDistanceButtons() {
        distanceSelectorEl.innerHTML = '';
        for (let i = 1; i < numberCells; i++) {
            const button = document.createElement('button');
            button.classList.add('distance-btn');
            button.textContent = i;
            button.dataset.distance = i;
            distanceSelectorEl.appendChild(button);
        }
        // –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—É –∫–Ω–æ–ø–∫—É (–≤—ñ–¥—Å—Ç–∞–Ω—å 1) –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        const firstBtn = distanceSelectorEl.querySelector('.distance-btn');
        if (firstBtn) {
            firstBtn.classList.add('selected');
            selectedDistance = 1;
            updateComputerMoveDisplay({direction: selectedDirection, distance: selectedDistance, isPlayer: true});
        }
    }

    function handleDirectionSelect(e) {
        if (e.target.classList.contains('control-btn')) {
            const newDirection = parseInt(e.target.dataset.direction);
            if (selectedDirection === newDirection) {
                // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ —Ç—É –∂ —Å—Ç—Ä—ñ–ª–∫—É ‚Äî –∑–±—ñ–ª—å—à—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å
                selectedDistance = (selectedDistance % (numberCells - 1)) + 1;
                // –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤—ñ–¥—Å—Ç–∞–Ω—ñ
                document.querySelectorAll('.distance-btn').forEach(btn => {
                    btn.classList.toggle('selected', parseInt(btn.dataset.distance) === selectedDistance);
                });
            } else {
                // –ó–≤–∏—á–∞–π–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—É
                document.querySelectorAll('.control-btn').forEach(btn => btn.classList.remove('selected'));
                e.target.classList.add('selected');
                selectedDirection = newDirection;
            }
            updateComputerMoveDisplay({}); // –û—á–∏—â–∞—î–º–æ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≤–∏–±–æ—Ä—É –≥—Ä–∞–≤—Ü—è
            updateComputerMoveDisplay({direction: selectedDirection, distance: selectedDistance, isPlayer: true});
        }
    }

    function handleDistanceSelect(e) {
        if (e.target.classList.contains('distance-btn')) {
            document.querySelectorAll('.distance-btn').forEach(btn => btn.classList.remove('selected'));
            e.target.classList.add('selected');
            selectedDistance = parseInt(e.target.dataset.distance);
            updateComputerMoveDisplay({}); // –û—á–∏—â–∞—î–º–æ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≤–∏–±–æ—Ä—É –≥—Ä–∞–≤—Ü—è
            updateComputerMoveDisplay({direction: selectedDirection, distance: selectedDistance, isPlayer: true});
        }
    }

    function resetSelections(skipDistanceReset) {
        selectedDirection = null;
        if (!skipDistanceReset) selectedDistance = null;
        document.querySelectorAll('.control-btn, .distance-btn').forEach(btn => btn.classList.remove('selected'));
        updateComputerMoveDisplay({});
    }

    function showModal(title, bodyHTML, buttons = []) {
        modalTitle.textContent = title;
        modalBody.innerHTML = bodyHTML;
        
        modalFooter.innerHTML = '';
        buttons.forEach(button => {
            const btn = document.createElement('button');
            btn.textContent = button.text;
            btn.className = `modal-button ${button.class || ''}`;
            btn.onclick = button.onClick;
            modalFooter.appendChild(btn);
        });
        
        modalOverlay.classList.remove('hidden');
    }

    function hideModal() {
        modalOverlay.classList.add('hidden');
        const gameContainer = document.getElementById('game-container');
        if (gameContainer) gameContainer.style.display = '';
        if (typeof window.hideMainMenu === 'function') window.hideMainMenu();
    }

    // --- –ó–∞–º—ñ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–µ–Ω—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ ---
    // showMainMenu, showOnlineGameMenu, showRules, showControlsInfo, showBoardSizeSelection
    // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞
    // –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É:
    // showMainMenu(showModal, t, () => showRules(showModal, t, showMainMenu), ...)

    // --- –ú–µ–Ω—é-—Ñ—É–Ω–∫—Ü—ñ—ó –∑ –∑–∞–º–∏–∫–∞–Ω–Ω—è–º–∏ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó ---
    function openMainMenu() {
        showMainMenu(
            showModal, t, openRules, openControlsInfo, openBoardSizeSelection, openOnlineGameMenu
        );
    }
    function openBoardSizeSelection() {
        showBoardSizeSelection(
            showModal, t, openMainMenu, openRules, openControlsInfo, openOnlineGameMenu
        );
    }
    function openRules() {
        showRules(showModal, t, openMainMenu);
    }
    function openControlsInfo() {
        showControlsInfo(showModal, t, openMainMenu);
    }
    function openOnlineGameMenu() {
        showOnlineGameMenu(showModal, t, hideModal, createRoom, joinRoom, openMainMenu);
    }

    // --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ —Ç–∞ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π ---
    directionGridEl.addEventListener('click', handleDirectionSelect);
    distanceSelectorEl.addEventListener('click', handleDistanceSelect);
    confirmMoveBtn.addEventListener('click', processPlayerMove);
    noMovesBtn.addEventListener('click', checkNoMoves);
    debugMovesBtn.addEventListener('click', showAvailableMoves);
    // styleSelect.addEventListener('change', () => changeStyle(styleSelect)); // –ë—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    hideBoardCheckbox.addEventListener('change', toggleBoardVisibility);
    blockedModeCheckbox.addEventListener('change', () => {
        blockedMode = blockedModeCheckbox.checked;
        window.showingAvailableMoves = false;
        window.availableMoves = null;
        renderBoard();
        if (blockedMode) {
            messageAreaEl.textContent = "–†–µ–∂–∏–º –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–æ! –ö–ª—ñ—Ç–∏–Ω–∫–∏ —Å—Ç–∞–Ω—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –ø—ñ—Å–ª—è —Ö–æ–¥—É.";
        } else {
            messageAreaEl.textContent = "–†–µ–∂–∏–º –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.";
        }
    });
    if (showMovesCheckbox) {
        showMovesCheckbox.addEventListener('change', () => {
            if (showMovesCheckbox.checked) {
                showAvailableMoves();
            } else {
                window.showingAvailableMoves = false;
                window.availableMoves = null;
                renderBoard();
            }
        });
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–º—É —Ç–∞ —Å—Ç–∏–ª—å
    // initStyle(styleSelect); // –ë—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    initTheme();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–ª–∞–π–Ω
    initOnlineUsers(onlineCountEl);
    
    // –û–Ω–æ–≤–ª–µ–Ω–∏–π –≤–∏–∫–ª–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:
    openMainMenu();
    window.global_startGame = startGame;
});

